// Class automatically generated by Dev-C++ New Class wizard projectile
#include "viper.h" // class's header file
#include "Resor.h" // resorces header file
#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
#include <cstdlib>

using namespace std;

resor rez;

double const pi = 3.141592653589793238462643383279502884197169399375105820974944;
double const grvac = 9.80;
double const c = 299800000;

struct resistor
{
       string color;
       double dval,
              dmult;
       int val,
           mult;
       }res[10];
// class constructor
viper::viper()
{
	// insert your code here
	res[0].color = "black";   res[0].val = 0;   res[0].mult = 1;
	res[1].color = "brown";   res[1].val = 1;   res[1].mult = 10;
	res[2].color = "red";     res[2].val = 2;   res[2].mult = 100;
	res[3].color = "orange";  res[3].val = 3;   res[3].mult = 1000;
	res[4].color = "yellow";  res[4].val = 4;   res[4].mult = 10000;
	res[5].color = "green";   res[5].val = 5;   res[5].mult = 100000;
	res[6].color = "blue";    res[6].val = 6;   res[6].mult = 1000000;
	res[7].color = "violet";  res[7].val = 7;   res[7].mult = 10000000;
	res[8].color = "gray";    res[8].val = 8;   res[8].mult = 100000000;
	res[9].color = "white";   res[9].val = 9;   res[9].mult = 1000000000;
	
	res[0].dval = 0;   res[0].dmult = 1;
	res[1].dval = 1;   res[1].dmult = 10;
	res[2].dval = 2;   res[2].dmult = 100;
	res[3].dval = 3;   res[3].dmult = 1000;
	res[4].dval = 4;   res[4].dmult = 10000;
	res[5].dval = 5;   res[5].dmult = 100000;
	res[6].dval = 6;   res[6].dmult = 1000000;
	res[7].dval = 7;   res[7].dmult = 10000000;
	res[8].dval = 8;   res[8].dmult = 100000000;
	res[9].dval = 9;   res[9].dmult = 1000000000;
}
void viper::spring()
{
     double Scons,inDis,finalDis, ans;
     string sel;

	while(true){
     cout << "\nViper_Physics_springenergy: ";
     cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
     // selection //////////////////////////////////////////////////////////////
     if(sel == "findwork"||sel == "joule")
     {
             cout << "    enter spring constant: ";
             Scons = rez.VDO();
             cout << "    enter inital distance: ";
             inDis = rez.VDO();
             cout << "    enter final distance:  ";
             finalDis = rez.VDO();
     
             ans = -0.5 * Scons * pow((finalDis - inDis),2);
             cout << "the potntal energy of the spring is: " << ans << "j\n\n";
             }
     if(sel == "springcons")
     {
            cout << "    enter the number of joules: ";
            ans = rez.VDO();
            cout << "    enter inital distance:      ";
            inDis = rez.VDO();
            cout << "    enter final distance:       ";
            finalDis = rez.VDO();
     
            Scons = ans/(-.5 * pow((finalDis - inDis),2));
            cout << "the spring constant is: " << Scons << "N/m\n\n";
            }
     if(sel == "finddis")
     {
            cout << "    enter the number of joules: ";
            ans = rez.VDO();
            cout << "    enter spring constant: ";
            Scons = rez.VDO();
     
            finalDis = sqrt(ans /(0.5 * Scons));
            cout << "the distance traveled is: " << finalDis << "m\n\n"; 
            }
     if(sel == "ls"||sel == "help")
     {
            cout << "________________________________________________________\n"
                 << setw(15) << "finddis" << setw(40) << "Find how much the spring is displaced\n"
                 << setw(15) << "springcons" << setw(40) << "Find spring constant\n"
                 << setw(15) << "findwork" << setw(40) << "Find potental energy of the system\n"
                 << setw(15) << "calc" << setw(41) << "simple calculater\n"
                 << setw(15) << "clear" << setw(40) << "Clear screen\n"
                 << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
            }
     if(sel =="cd"||sel =="CD")
             break;
     if(sel == "calc")
	          rez.calc();

     if(sel =="clear")
             rez.clear();
             }
     }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void viper::consaccel()
{
     double t, vi, vf, 
            a, xi, xf;
     string sel;
          
     while(true){

           cout << "\nViper_Physics_constantAccel: ";

           cin >> sel;
           rez.IN_History(sel);
           rez.univSelec(sel,sel); 
     
     
           if(sel == "fvelotim"||sel == "Velotim"||sel == "VELOTIM")
           {
                  cout << "\n    Enter acceleration:   ";
                  a = rez.VDO();
                  cout << "    Enter total time:       ";
                  t = rez.VDO();
                  cout << "    Enter initial velocity: ";
                  vi = rez.VDO();
                  
                  vf = vi + (a * t);
                  cout << "Final velocity is: " << vf << endl << endl;
                  }
           if(sel == "ivelotim"||sel == "Velotim"||sel == "VELOTIM")
           {
                  cout << "\n   Enter acceleration: ";
                  a = rez.VDO();
                  cout << "    Enter total time:     ";
                  t = rez.VDO();
                  cout << "    Enter final velocity: ";
                  vf = rez.VDO();
                  
                  vi = vf - (a * t);
                  cout << "inical velocity is: " << vi << endl << endl;
                  }
           if(sel == "fposvtim"||sel == "Posvtim"||sel == "POSVTIM")
           {
                  cout << "\n    Enter inichal position: ";
                  xi = rez.VDO();
                  cout << "    Enter total time:         ";
                  t = rez.VDO();
                  cout << "    Enter inical velocity:    ";
                  vi = rez.VDO();
                  cout << "    Enter final velocity:     ";
                  vf = rez.VDO();
                  
                  xf = xi + .5 * (vi + vf) *t;
                  cout << "final position is: " << xf << endl << endl;
                  }
           if(sel == "iposvtim"||sel == "Posvtim"||sel == "POSVTIM")
           {
                  cout << "\n    Enter inichal position: ";
                  xi = rez.VDO();
                  cout << "    Enter total time:         ";
                  t = rez.VDO();
                  cout << "    Enter inical velocity:    ";
                  vi = rez.VDO();
                  cout << "    Enter final velocity:     ";
                  vf = rez.VDO();
                  
                  xi = xf - .5 * (vi + vf) *t;
                  cout << "inical position is: " << xi << endl << endl;
                  }
           if(sel == "ls"||sel == "LS"||sel == "HELP"||sel == "help"||sel == "Help")
           {
                cout << "________________________________________________________\n"
                     << setw(15) << "ivelotim" << setw(40) << "inical velocity from time\n"
                     << setw(15) << "fvelotim" << setw(40) << "final velocity from time\n"
                     << setw(15) << "iposvtim" << setw(40) << "positon from velocity and time\n"
                     << setw(15) << "fposvtim" << setw(40) << "positon from velocity and time\n"
                     << setw(15) << "postime" << setw(40) << "positon as a function of time\n"
                     << setw(15) << "velopos" << setw(40) << "velocity as a function of positon\n"
                     << setw(15) << "calc" << setw(41) << "simple calculater\n"
                     << setw(15) << "clear" << setw(40) << "Clear screen\n"
                     << setw(15) << "cd"<< setw(40) << "Exit program\n";     
                }
         if(sel =="cd"||sel =="CD")
                 break;
         if(sel == "calc")
	              rez.calc();

         if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 clear();
                 }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void viper::kenenergy()
{
     double mass, veloc, ans;
     string sel;              
     
     while(true){

          cout << "\nViper_Physics_keneticenergy: ";

          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "findwork"||sel == "joule")
          {
                cout << "    enter mass of the object:     ";
                mass = rez.VDO();
                cout << "    enter velocity of the object: ";
                veloc = rez.VDO();
                
                ans = 0.5 * mass * pow(veloc,2);
                cout << "the potental energy of the system is " << ans << "j\n\n";
                }
          if(sel == "findvelo"||sel == "veloc")
          {
                cout << "    enter mass of the object:     ";
                mass = rez.VDO();
                cout << "    enter energy of the object:   ";
                ans = rez.VDO();
                
                veloc = sqrt(ans / (0.5 * mass));
                cout << "the velocity of the system is " << veloc << "m/s\n\n";
                 }
          if(sel == "findmass"||sel == "mass")
          {
                cout << "    enter velocity of the object:     ";
                veloc = rez.VDO();
                cout << "    enter energy of the object:       ";
                ans = rez.VDO();
                
                mass = sqrt(ans / (0.5 * pow(veloc,2)));
                cout << "the velocity of the system is " << mass << "m/s\n\n";
                 }
          if(sel == "ls"||sel == "help")
          {
            cout << "________________________________________________________\n"
                 << setw(15) << "findvelo/veloc" << setw(40) << "Find how much the spring is displaced\n"
                 << setw(15) << "findmass/mass" << setw(40) << "Find spring constant\n"
                 << setw(15) << "findwork/joule" << setw(40) << "Find potental energy of the system\n"
                 << setw(15) << "calc" << setw(41) << "simple calculater\n"
                 << setw(15) << "clear" << setw(40) << "Clear screen\n"
                 << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
         if(sel =="cd"||sel =="CD")
         	     break;
     	   if(sel == "calc")
	     	        rez.calc();

         if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
             }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void viper::consenergy()
{
     string sel;
     double mass1, vel1, vel2, disI, disF, grav;              
     
     while(true){

          cout << "\nViper_Phisics_constant-energy: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
     
     if(sel == "veloc"||sel == "Veloc"||sel == "VELOC")
     {
             cout << "Kenetic energy\n"
                  << "----------------------------------------------\n";
             cout << "    enter the mass of object:            ";
             mass1 = rez.VDO();
             cout << "    enter the velocity of object:        ";
             vel1 = rez.VDO();
             cout << "______________________________________________\n"
                  << "Gravity energy\n"
                  << "----------------------------------------------\n";
             cout << "    enter the inical distance of object: ";
             disI = rez.VDO();
             cout << "    enter the final distance of object:  ";
             disF = rez.VDO();
             
             vel2 = sqrt(pow(vel1,2) * 2 * 9.8 * abs(disF - disI));
             cout << "the final velocity is: " << vel2 << "m/s\n\n";
     }
     if(sel == "pveloc"||sel == "PVeloc"||sel == "PVELOC")
     {
            cout << "Kenetic energy\n"
                  << "----------------------------------------------\n";
             cout << "    enter the mass of object:            ";
             mass1 = rez.VDO();
             cout << "    enter the velocity of object:        ";
             vel1 = rez.VDO();
             cout << "______________________________________________\n"
                  << "Gravity energy\n"
                  << "----------------------------------------------\n";
             cout << "    enter the inical distance of object: ";
             disI = rez.VDO();
             cout << "    enter the final distance of object:  ";
             disF = rez.VDO();
             cout << "    enter gravity acceleration:          ";
             grav = rez.VDO();
             
             vel2 = sqrt(pow(vel1,2) * 2 * grav * abs(disF - disI));
             cout << "the final velocity is: " << vel2 << "m/s\n\n";
            }
     if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
                        << setw(15) << "veloc" << setw(40) << "find final velocity\n"
                        << setw(15) << "pveloc" << setw(40) << "find final velocity on other planets\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
     if(sel =="cd"||sel =="CD")
             break;
     if(sel == "calc")
	          rez.calc();

     if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
             rez.clear();
     }
}
void viper::torque()
{
     double a1, meter, n, x, a;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_Torque: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
     if(sel == "tor"||sel == "Tor"||sel == "TOR")
            {
                   cout << "    enter radius in Meters:      ";
                   meter = rez.VDO();
                   cout << "    enter force in Nutons:       ";
                   n = rez.VDO();
                   cout << "    enter angle between vectors: ";
                   x = rez.VDO();
                   
                   a = (meter * n) * sin(x * (pi/(180)));
                   cout << "the Torqe is: " << a << endl;
                   }
            if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
                        << setw(15) << "tor" << setw(40) << "calculate torque\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 clear();
     }
}
void viper::calc()
{
     double ans, num1, num2;
     string mod;
     
     cin >> num1;
     cin >> mod;
     
     if(mod == "tan"||mod == "sin"||mod == "cos"||
        mod == "rtan"||mod == "rsin"||mod == "rcos"||
        mod == "arctan"||mod == "arcsin"||mod == "arccos"||
        mod == "log"||mod == "ln"||mod == "log10"||mod == "e"||
        mod == "sqrt")
      {
             if(mod == "tan")
                    {ans = tan(num1 *(pi/180));}
             else if(mod == "cos")
                    {ans = cos(num1 *(pi/180));}
             else if(mod == "sin")
                    {ans = sin(num1 *(pi/180));}
                    
             else if(mod == "arctan")
                    {ans = tan(num1) *(180/pi);}
             else if(mod == "arccos")
                    {ans = cos(num1) *(180/pi);}
             else if(mod == "arcsin")
                    {ans = sin(num1) *(180/pi);}
                    
             else if(mod == "rtan")
                    {ans = tan(num1);}
             else if(mod == "rcos")
                    {ans = cos(num1);}
             else if(mod == "rsin")
                    {ans = sin(num1);}
                    
             else if(mod == "log")
                    {ans = log(num1 )/ log(10);}
             else if(mod == "ln")
                    {ans = log(num1);}
             else if(mod == "log10")
                    {ans = pow(10,num1);}
             else if(mod == "e")
                    {ans = pow(2.718281828,num1);}
             else if(mod == "sqrt")
                    {ans = sqrt(num1);}
             }
      if(mod == "-"||mod == "+"||mod == "/"||mod == "*")
      {
             cin >> num2;
             if(mod == "+")
                    {ans = num1 + num2;}
             else if(mod == "-")
                  {ans = num1 - num2;}
             else if(mod == "*")
                  {ans = num1 * num2;}
             else if(mod == "/")
                  {ans = num1 / num2;}
             else
                 return;
             }
          
     cout << "\n" << ans << endl;
     }
void viper::projectile()
{
     double ans, meter, velo, time, 
	    angle, hight, acc, cash;
     string sel,Sacc, Shight,Svelo;
     
     
     while(true){
          cout << "\nViper_Physics_projectileMotion: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "levelsr")
          {
                 cout << "    enter velocity: ";
                 velo  = rez.VDO();
                 cout << "    enter angle: ";
                 angle = rez.VDO();
                 
                 ans = (pow(velo,2) * sin((2 * angle) * (pi/180))) / grvac;
                 cout << "the range of the projectile is " << ans << "m\n";
                 }
          if(sel == "levelsh")
          {
                 cout << "    enter velocity: ";
                 velo = rez.VDO();
                 cout << "    enter angle: ";
                 angle = rez.VDO();
                 
                 ans = (pow(velo,2) * pow(sin(angle * (pi/180)),2)) / (2 * grvac);
                 cout << "the range of the projectile is " << ans << "m\n";
                 }
	  if(sel == "platr")
	  {
          	cout << "    Enter velocity: ";
		    velo = rez.VDO();
          	cout << "    Enter angle: "; 
		    angle = rez.VDO();
		    cout << "    Enter the initial hight: ";
		    hight = rez.VDO();
		    cout << "    Enter the gravity accel: ";
		    acc = rez.VDO();

		    cash = sin(angle * (pi/180)) * velo;
		    ans = (cash + sqrt(pow(cash,2) -(4* (acc/2)*hight))) / (acc);
		    if(ans < 0)
		 	 ans = (cash - sqrt(pow(cash,2) -(4* (acc/-2)*hight))) / (-1*acc);
		 
		    ans = cos(angle * (pi/180)) * velo * ans;
		    cout << "The maximum range of the projectile is: " << ans << endl;
	  }
	  if(sel == "plath")
	  {
          	cout << "    Enter velocity: ";
		    velo = rez.VDO();
                 cout << "    Enter angle: ";
		    angle= rez.VDO();
		    cout << "    Enter the initial hight: ";
		    hight = rez.VDO();
		    cout << "    Enter the gravity accel: ";
		    acc = rez.VDO();

		    cash = sin(angle * (pi/180)) * velo;
		    ans = abs(cash /(acc));
		    ans = ((acc/-2)*ans*ans) + (cash * ans) + hight;
		 	 cout << "The maximum hight of the projectile is: " << ans << endl;
	  }
	  if(sel == "angltor"){
		  cout << "    Enter the velocity: ";
		  velo = rez.VDO();
		  cout << "    Enter the distance o the point: ";
		  meter = rez.VDO();
		  cout << "    Enetr the hight of the platfom: ";
		  hight = rez.VDO();

		  cash =pow(velo, 2.0) + sqrt(pow(velo,4.0) - 9.8 *(9.8*pow(meter,2.0) + 2*9.8*hight*pow(velo,2.0)));
		  cash /= (9.8 * meter);
		  angle = atan(cash) * (180/pi);

		  cout << "The angle needed to reach the target is: " << angle << endl;
	  }
          if(sel == "help"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
			   					 ///////////////////////////////////////
                        << setw(15) << "angltor" << setw(40) << "Find the angle needed to reach a point\n"
                        << setw(15) << "levelsr" << setw(40) << "calculate range of projectile\n"
                        << setw(15) << "levelsh" << setw(40) << "calculate hight of projectile\n"
                        << setw(15) << "platr" << setw(40) << "find max range of a raised projectile\n"
                        << setw(15) << "plath" << setw(40) << "find max hight of a raised projectile\n"
                        << setw(15) << "calc" << setw(40) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd")
                 break;
     	     if(sel == "calc")
	              rez.calc();

           if(sel =="clear")
                 rez.clear();
          }
     }
void viper::resistor()
{
     long double resist,cash1, cash2, cash3, ans2;
     
     int ans1 =0, ans3,
         u = 100000000, v =0,
         r[3], ans;
         
     string sel, col[3], color[3];
     col[2] = "black";
     
     while(true){
          cout << "\nViper_Physics_ResisterColorCode: ";
          cin >> sel;
     	  rez.IN_History(sel);
          rez.univSelec(sel,sel); 
     
          
          if(sel == "color"||sel == "Color"||sel == "COLOR")
          {
                 cout << "\n    Enter resistance: ";
                 resist = rez.VDO();
                 ans2 = u;
                 ans3 = 9;

                  // serch for multiplier multipliers less than 10 /////////////
                  if(resist <100){
                            cash1 = (resist / 10.0);
                            
                            col[2] = res[0].color;
                            goto assign;
                         }
                  // serch for multipliers /////////////////////////////////////
                 while (ans2 > 0){
                         cash1 = (resist / ans2);
                         
                         if(cash1 > 1||cash1 == 1)
                         {
                              col[2] = res[ans3 - 2].color;
                              break;
                              }
                         ans3 --;
                         ans2 = (ans2 /10);
                         } 
                 // ans2 = 100000000
                 // ans3 = 9
                 // find first diget ///////////////////////////////////////////
assign:
                 cash2 = (cash1);
                 for(int n=9; n>=0; n--)
                 {
                         if(cash2 >= n &&cash2 <=(n+1))
                         {
                                   col[0] = res[n].color;
                                   cash3 = (cash1 - n) *11;
                                   break;
                                   }
                         }
                 
                 //  ///////////////////////////////////////////////////////////
                 for(int n=9; n>=0; n--)
                 {
                        /* if(cash3 == 0)
                         {
                                  col2 = res[0].color;
                                  break;
                                  }*/
                         if(cash3 >= n &&cash3 <=(n+1))
                         {
                                   col[1] = res[n].color;
                                   //break;
                                   }
                         }
                  
                 cash1 =0;
                 cash2 =0;
                 cash3 =0;
                            
                 cout << "\n      |\n"
                      << " _____|______\n"
                      << "|            |\n"
                      << "|" << setw(10) << col[0] << "  |\n"
                      << "|            |\n"
                      << "|" << setw(10) << col[1] << "  |\n"
                      << "|            |\n"
                      << "|" << setw(10) << col[2] << "  |\n"   
                      << "|____________|\n"
                      << "      |\n"
                      << "      |\n\n";
                 }
          if(sel == "number"||sel == "Number"||sel == "NUMBER")
          {
                 for(int v =0; v <3; v++)
                 {
reenter:
                         cout << "\n    Enter color band : ";
                         cin >> color[v];
     			 rez.univSelec(color[v],color[v]); 
                         
                         if(color[v] == "black")
                                     color[v] = "black";
                         else if(color[v] == "brown")
                                     color[v] = "brown";
                         else if(color[v] == "red")
                                     color[v] = "red";
                         else if(color[v] == "orange")
                                     color[v] = "orange";
                         else if(color[v] == "yellow")
                                     color[v] = "yellow";
                         else if(color[v] == "green")
                                     color[v] = "green";
                         else if(color[v] == "blue")
                                     color[v] = "blue";
                         else if(color[v] == "violet")
                                     color[v] = "violet";
                         else if(color[v] == "gray")
                                     color[v] = "gray";
                         else if(color[v] == "white")
                                     color[v] = "white";
                                     
                         else 
                         {
                              cout << "\n\a --INVALID COLOR--\n\n";
                              goto reenter;
                              }
                 }      
                 for(int v=0; v <2; v++){
                     for(int n=9; n >=0; n--)
                             {
                                     if(res[n].color == color[v])
                                                     r[v] = res[n].val;
                                                     }
                             }
                     for(int n=9; n >=0; n--)
                             {
                                     if(res[n].color == color[2])
                                                     r[2] = res[n].mult;
                                                     }
                 
                 ans = ((r[0] * 10) + r[1]) * r[2];
                 cout << "\n       _____________________\n"
                      << " _____| " << setw(12) <<ans << "        |_____\n"
                      << "      |_____________________|\n";
          }
                    
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
                        << setw(15) << "color" << setw(40) << "find color from resistance\n"
                        << setw(15) << "number" << setw(40) << "find resistance by color\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
     	     if(sel == "calc")
	     	        rez.calc();

           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
          }
     }
////////////////////////////////////////////////////////////////////////////////
void viper::grav()
 {
	 string sel;
	 double ans, mas, masS, r=-2, g,
            ans2, mas2, masS2, r2;
     
     while(true){
          cout << "\nViper_Physics_Gravity: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "wseal"||sel == "WSeaL"||sel == "WSEAL")
          {
                 cout << "    Enter mass of object: ";
                 mas = rez.VDO();
                 
                 cout << "    Enter gravity accel: ";
                 g = rez.VDO();
                 
                 ans = mas * g;
                 cout << "the ewight of the objectA is "<< ans << endl;
                 }
          if(sel == "wall"||sel == "WalL"||sel == "WALL")
          {
                 cout << "    Enter mass of objectA:     ";
                 mas = rez.VDO();
                 
		 r=-2;
		 while(r <= 0)
		 {
                 	cout << "    Enter radius between the objects: ";
                 	r = rez.VDO();
		 	if(r == 0)
				 cout << "\n\t<<Error: division by zero>>\n" <<
		        	         "\n         Enter a diffrent value for radius\n" << 
			        	 "_________________________________________________\n";
		 }
                 
                 cout << "    Enter mass of objectB:     ";
                 masS = rez.VDO();
                 
                 ans = (0.0000000000667 * mas * masS) / (r*r);
                 cout << "the wight of the objectA is "<< ans << endl;
                 }
          if(sel == "gravdif"||sel == "GravDif"||sel == "GRAVDIF")
          {
                 cout << "    Enter mass of object:        ";
                 mas = rez.VDO();
                 cout << "    Enter mass of serface:       ";
                 masS = rez.VDO();
                 cout << "    Enter distance from serface: ";
                 r = rez.VDO();
                 
                 cout << "    Enter mass of object:        ";
                 mas2 = rez.VDO();
                 cout << "    Enter mass of serface:       ";
                 masS2 = rez.VDO();
                 cout << "    Enter distance from serface: ";
                 r2 = rez.VDO();
                 
                 ans = (0.0000000000667 * mas * masS) / pow(r, 2);
                 cout << "\nthe first gravity accelertion is: "<< ans << "\n";
                 ans2 = (0.0000000000667 * mas2 * masS2) / pow(r2, 2);
                 cout << "\nthe second gravity accelertion is: "<< ans << "\n";
                 
                 ans = ans - ans2;
                 
                 cout << "\nthe difrence is: "<< ans << "\n";
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
                        << setw(15) << "wseal" << setw(40) << "weight at sea level\n"
                        << setw(15) << "wall" << setw(40) << "weight at all levels\n"
                        << setw(15) << "gravdif" << setw(40) << "calculate gravity diffrence\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
     	     if(sel == "calc")
	              rez.calc();

           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
            	 rez.clear();
          }
      }
void viper::momentum()
{
     string sel;
     double mi, mf, vi, vf, ans, t;
     
     while(true){
          cout << "\nViper_Physics_Momentum: ";
          cin >> sel;
          rez.IN_History(sel);
          rez.univSelec(sel,sel); 
     
          
          if(sel == "isolated"||sel == "Isolated"||sel =="ISOLATED")
          {
                 cout << "    Enter the mass of the object: ";
                 mi = rez.VDO();
                 cout << "    Enter the mass of the object: ";
                 mf = rez.VDO();
                 cout << "    Enter velocity of object:     ";
                 vi = rez.VDO();
                 
                 ans = -(mf / mi) * vi;
                 cout << "\nThe object is moving: " << ans << "m/s\n";
                 }
          if(sel == "nonisol"||sel == "NonIsol"||sel =="NONISOL")
          {
                 cout << "    Enter the time in seconds:       ";
                 t = rez.VDO();
                 cout << "    Enter the mass of the object:    ";
                 mi = rez.VDO();
                 cout << "    Enter inital velocity of object: ";
                 vi = rez.VDO();
                 
                 ans = mi * vi;
                 
                 cout << "    Enter final velocity of object: ";
                 vf = rez.VDO();
                 
                 vi = mi * vf;
                 mf = vi - ans;
                 ans = mf / t;
                 cout << "\nthe force of colision " << ans << " N\n";
                 }
          
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
            {
                   cout << "________________________________________________________\n"
                        << setw(15) << "isolated" << setw(40) << "isolated system modle\n"
                        << setw(15) << "nonisol" << setw(40) << "non isolate colision\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
           if(sel == "calc")
	              rez.calc();

           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
          }
     }
//////////////////////////////////////////////////////////////////////////////// 
void viper::cent()
{
     string sel;
     double meters, grav, time;
     string min = "min", 
            h = "hours",
            day = "days",
            w = "weeks",
            m = "months",
            y = "years",
            ins = "seconds";
     
     while(true){
          cout << "\nViper_Physics_Centrifuge: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "rad"||sel == "Rad"||sel == "RAD")
          {
                 cout << "  _____________________________________________________________\n"
                      << " | Enter radeus of Centrifuge: ";
                 meters = rez.VDO();
                 cout << " | Enter Centrifuge gravity: ";
                 grav = rez.VDO();
     
                 time = sqrt((4*9.869604*meters)/grav);
     
                 if (time >60)
                 {
                    time = time/60;
                    ins = min;
                    if (time >60)
                    {
                       time = time/60;
                       ins = h;
                       if(time >24)
                       {
                               time = time/7;
                               ins = w;
                               if(time >4)
                               {
                                       time = time/4;
                                       ins = m;
                                       if(time >12)
                                       {
                                               time = time/12;
                                               ins = y;
                                               }
                                       }
                               }
                       }
                 }
                 grav = grav/9.8;
     
                 cout << "  _____________________________________________________________\n"
                      << " | The Centrifuge will make one revolution in " << time << " " << ins << endl 
                      << " | " <<" to acheve a gravity " << grav << " that of earth\n\n";
                 }
                 
          if(sel == "time"||sel == "Time"||sel == "TIME")
          {
                 cout << "  _____________________________________________________________\n"
                      << " | Enter the time for each revoluton: ";
                 time = rez.VDO();
                 cout << " | Enter desierd gravity: ";
                 grav = rez.VDO();
     
                 meters = ((time * time)* grav)/(4*9.869604);
     
                 grav = grav/9.8;
     
                 cout << "  _____________________________________________________________\n"
                      << " | The Centrifuge must be " << meters << " meters\n" 
                      << " | to make " << grav << " that of earth gravity\n";
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                   cout << "________________________________________________________\n"
                        << setw(15) << "rad" << setw(40) << "radius for Centrifuge to achive gravity\n"
                        << setw(15) << "time" << setw(40) << "time for Centrifuge to gain gravity\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
     	     if(sel == "calc")
	              rez.calc();

           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
            }
     }
void viper::thermexp()
{
     double dl,a,l,dt,t, ft,fl,ans;
     string sel;              
     
     while(true){

          cout << "\nViper_Physics_ThermalExpansion: ";
          cin >> sel;
          rez.IN_History(sel);
     	  rez.univSelec(sel,sel); 
     
     
          if(sel =="exp"||sel =="Exp"||sel =="EXP")
          {
           	cout << "    enter inital length:     ";
            	l = rez.VDO();
            	cout << "    enter inital temprature: ";
            	t = rez.VDO();
            	cout << "    enter final temprature:  ";
            	ft = rez.VDO();
            	cout << "    enter avrage linier expantion coeficant: ";
            	a = rez.VDO();
            
            	dt = ft - t;
            
            	dl = a * l * dt; // formula
            	ans = l + dl;
            	cout << "\nthe final length of the object is: " << ans << endl;
            }
     	    if(sel == "temp"||sel == "Temp"||sel == "TEMP")
     	    {
            	cout << "    enter inital length:     ";
            	l = rez.VDO();
            	cout << "    enter inital temprature: ";
            	t = rez.VDO();
            	cout << "    enter final length:      ";
            	fl = rez.VDO();
            	cout << "    enter avrage linier expantion coeficant: ";
            	a = rez.VDO();
            
            	dl = fl - l;
            
            	dt = dl / (a * l); // formula
            	dt = t + dt;
            	cout << "\ntemprature to acheve "<< l << " is: " << dt << endl;
            }
     	    if(sel == "cons"||sel == "Cons"||sel == "CONS")
     	    {
            	cout << "    enter inital length:     ";
            	l = rez.VDO();
            	cout << "    enter final length:      ";
            	fl = rez.VDO();
            	cout << "    enter inital temprature: ";
            	t = rez.VDO();
            	cout << "    enter final temprature:  ";
            	ft = rez.VDO();
            
            	dl = fl - l;
            	dt = ft - t;
            
            	a = dl / (dt * l); // formula
            	dt = t + dt;
            	cout << "\nthe constant of the material is: " << a << endl;
            }
     	  if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                   cout << "________________________________________________________\n"
                        << setw(15) << "exp" << setw(40) << "find expansiton of material\n"
                        << setw(15) << "temp" << setw(40) << "find temprature to acheve lenght\n"
                        << setw(15) << "calc" << setw(41) << "simple calculater\n"
                        << setw(15) << "clear" << setw(40) << "Clear screen\n"
                        << setw(15) << "cd"<< setw(40) << "Exit program\n";
                        
                   }
           if(sel =="cd"||sel =="CD")
                 break;
     	     if(sel == "calc")
	              rez.calc();

           if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
           }
     }
void viper::heatcap()
{
     double c, ti, tf, q, td,m,
            c2, ti2, tf2, q2, td2,m2;
            
     string sel;
     
     while(true){
          cout << "\nViper_Physics_specificHeat: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
             if(sel == "cat")
             {
                    cout << "    Enter heat capacity:      ";
                    c = rez.VDO();
                    cout << "    Enter inical temperature: ";
                    ti = rez.VDO();
                    cout << "    Enter final temperature:  ";
                    tf = rez.VDO();
                    
                    td = tf - ti;
                    
                    q = c * td;
                    cout << "\nthe Q is: " << q << endl;
                    }
             if(sel == "sheat"||sel == "SHeat"||sel == "SHEAT")
             {
                    cout << "    Enter inical temperature:  ";
                    ti = rez.VDO();
                    cout << "    Enter final temperature:   ";
                    tf = rez.VDO();
                    cout << "    Enter mass of the object:  ";
                    m = rez.VDO();
                    cout << "    Enter jules in the system: ";
                    q = rez.VDO();
                    
                    td = tf - ti;
                    
                    c = q / (m * td);
                    cout << "\nSpecific heat of the object is: " << c << endl;
                    }
             if(sel == "joule"||sel == "Joule"||sel == "JOULE"||sel == "Q"||sel == "q")
             {
                    cout << "    Enter specific heat:      ";
                    c = rez.VDO();
                    cout << "    Enter inical temperature: ";
                    ti = rez.VDO();
                    cout << "    Enter final temperature:  ";
                    tf = rez.VDO();
                    cout << "    Enter mass of the object: ";
                    m= rez.VDO();
                    
                    td = tf - ti;
                    
                    q = m * c * td;
                    cout << "\nEnergy containd in the system is: " << q << endl;
                    }
             if(sel == "inical"||sel == "Inical"||sel == "INICAL")
             {
                    cout << "    Enter specific heat:       ";
                    c= rez.VDO();
                    cout << "    Enter final temperature:   ";
                    tf= rez.VDO();
                    cout << "    Enter delta temperature:   ";
                    td= rez.VDO();
                    cout << "    Enter mass of the object:  ";
                    m = rez.VDO();
                    cout << "    Enter jules in the system: ";
                    q = rez.VDO();
                    
                    td = q / (m * c);
                    ti = td - tf;
                    cout << "\nInical temp of the system is: " << ti << endl;
                    }
             if(sel == "final"||sel == "Final"||sel == "FINAL")
             {
                    cout << "    Enter specific heat:       ";
                    c = rez.VDO();
                    cout << "    Enter inical temperature:  ";
                    ti = rez.VDO();
                    cout << "    Enter delta temperature:   ";
                    td = rez.VDO();
                    cout << "    Enter mass of the object:  ";
                    m = rez.VDO();
                    cout << "    Enter jules in the system: ";
                    q = rez.VDO();
                    
                    td = q / (m * c);
                    tf = abs(td - ti);
                    cout << "\nFinal temp of the system is: " << tf << endl;
                    }
             if(sel == "2sh"||sel == "2SH")
             {
                    cout << "    Enter specific heat of known:        ";
                    c = rez.VDO();
                    cout << "    Enter inical temperature of known:   ";
                    ti = rez.VDO();
                    cout << "    Enter final temperature of known:    ";
                    tf = rez.VDO();
                    cout << "    Enter mass of the of known object:   ";
                    m = rez.VDO();
                    cout << "----------------------------------------------------";
                    cout << "    Enter inical temperature of unknown: ";
                    ti2 = rez.VDO();
                    cout << "    Enter final temperatureof unknown:   ";
                    tf2 = rez.VDO();
                    cout << "    Enter mass of the objectof unknown:  ";
                    m2 = rez.VDO();
                    
                    td = tf - ti;
                    td2 = tf2 -  ti2;
                    
                    q = (m * c * td) / (m2 * td2);
                    cout << "\nthe unknown specific heat is: " << q << "(J/kgC)\n";
                    }
             if(sel == "impact"||sel == "Impact"||sel == "IMPACT")
             {
                    cout << "    Enter specific heat:       ";
                    c = rez.VDO();
                    cout << "    Enter velocity of object:  ";
                    tf = rez.VDO();
                    
                    
                    td = pow(tf,2) / (2 * c);
                    
                    cout << "\nThe temp diffrence of the object is: " << td << " C\n";
                    }
             if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
             {
                    cout << "________________________________________________________\n"
                         << setw(15) << "cat" << setw(40) << "find 'Q' from Heat capacity and temp\n"
                         << setw(15) << "sheat" << setw(40) << "find specific heat\n"
                         << setw(15) << "joule" << setw(40) << "find jules in the system\n"
                         << setw(15) << "inical" << setw(40) << "find jules in the system\n"
                         << setw(15) << "final" << setw(40) << "find jules in the system\n"
                         << setw(15) << "2sh" << setw(40) << "find specific heat from two objects\n"
                         << setw(15) << "impact" << setw(40) << "find heat from impacts\n"
                         << setw(15) << "calc" << setw(41) << "simple calculater\n"
                         << setw(15) << "clear" << setw(40) << "Clear screen\n"
                         << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                         }
             if(sel =="cd"||sel =="CD")
                    break;
      	    if(sel == "calc")
	                 rez.calc();

             if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                    rez.clear();
            }
     }
void viper::graven()
{
     double m,g,h,ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_GravityPotentalEnergy: ";
          cin >> sel;
          rez.IN_History(sel);
          rez.univSelec(sel,sel); 
     
          
             if(sel == "joule"||sel == "Joule"||sel == "JOULE")
             {
                    cout << "    Enter mass of object:       ";
                    m = rez.VDO();
                    cout << "    Enter gravity acceleration: ";
                    g = rez.VDO();
                    cout << "    Enter hight of the object: ";
                    h = rez.VDO();
                    
                    ans = m * g * h;
                    cout << "\nthe system potental energy is: " << ans << " j\n";
                    }
             if(sel == "hight"||sel == "Hight"||sel == "HIGHT")
             {
                    cout << "    Enter mass of object:           ";
                    m = rez.VDO();
                    cout << "    Enter gravity acceleration:     ";
                    g = rez.VDO();
                    cout << "    Enter potental energy (joules): ";
                    ans = rez.VDO();
                    
                    h = ans / (m * g);
                    cout << "\nthe object is: " << h << " meters from the serface\n";
                    }
             if(sel == "mass"||sel == "Mass"||sel == "MASS")
             {
                    cout << "    Enter mass of object:       ";
                    m = rez.VDO();
                    cout << "    Enter gravity acceleration: ";
                    g = rez.VDO();
                    cout << "    Enter hight of the object:  ";
                    h = rez.VDO();
                    
                    m = ans / (g * h);
                    cout << "\nthe mass of the object is: " << m << " kg\n";
                    }
             if(sel == "grav"||sel == "Grav"||sel == "GRAV")
             {
                    cout << "    Enter mass of object:       ";
                    m = rez.VDO();
                    cout << "    Enter energy of the system: ";
                    ans = rez.VDO();
                    cout << "    Enter hight of the object:  ";
                    h = rez.VDO();
                    
                    g = ans / (m * h);
                    cout << "\nthe gravity acting on the object is: " << g << endl;
                    }
             if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
             {
                    cout << "________________________________________________________\n"
                         << setw(15) << "grav" << setw(40) << "find gravity acting on the system\n"
                         << setw(15) << "hight" << setw(40) << "find hight of object\n"
                         << setw(15) << "joule" << setw(40) << "find potental energy of an object\n"
                         << setw(15) << "mass" << setw(40) << "find mass of a falling object\n"
                         << setw(15) << "calc" << setw(41) << "simple calculater\n"
                         << setw(15) << "clear" << setw(40) << "Clear screen\n"
                         << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                         }
             if(sel =="cd"||sel =="CD")
                    break;
             if(sel == "calc")
	                 rez.calc();

             if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                    rez.clear();
            }
     }
void viper::adiabetic()
{
     double p,l,v,ans,
            p2,v2,cash,
            cv,cp, t;
     string sel, gans;
     
     while(true){
          cout << "\nViper_Physics_adiabetic-IdealGas: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
     if(sel == "compres"||sel == "Compres"||sel == "COMPRES")
     {
            cout << " __________________________________________\n"
                 << "| Do you know the ratio (gamma): ";
            cin >> gans;
            if(gans == "yes"||gans == "Yes"||gans == "YES"||gans == "Y"||gans == "y")
            {
                    cout << "| Enter the raio (gamma): ";
                    l = rez.VDO();
                    }
            else
                {
                    cout << "| Enter cp: ";
                    cp = rez.VDO();
                    cout << "| Enter cv: ";
                    cv = rez.VDO();
                    
                    l = cp / cv;
                    }
            
            cout << "\n    Enter the inichal volume of gas: ";
            v = rez.VDO();
            cout << "    Enter the final volume of gas:   ";
            v2 = rez.VDO();
            cout << "    Enter the presure in atm:        ";
            p = rez.VDO();
            
            cash = v / v2;
            
            ans = p * pow(cash, l);
            cout << "\nthe final presure is: " << ans << " atm";
            }
     if(sel == "work"||sel == "Work"||sel == "WORK")
     {
            cout << "    Enter the inital volume:  ";
            v = rez.VDO();
            cout << "    Enter the final volume:   ";
            v2 = rez.VDO();
            cout << "    Enter the number of mols: ";
            l = rez.VDO();
            cout << "    Enter the temprature:     ";
            t = rez.VDO();
            cout << "    Enter the inical presure (kPa): ";
            p = rez.VDO();
            
            ans = l * 8.314 * t * log(v2 / v);
            cash = (v2 - v) * p;
            ans = ans - cash;
            
            cout << "the work don on the system is " << ans << " j\n";
            }
     if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
             {
                    cout << "________________________________________________________\n"
                         << setw(15) << "compres" << setw(40) << "use pv^l for presure\n"
                         << setw(15) << "work" << setw(40) << "find work of an adiabetic expantiob\n"
                         //<< setw(15) << "" << setw(40) << "\n"
                         << setw(15) << "calc" << setw(41) << "simple calculater\n"
                         << setw(15) << "clear" << setw(40) << "Clear screen\n"
                         << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                         }
             if(sel =="cd"||sel =="CD")
                    break;
     	     if(sel == "calc")
	            rez.calc();

             if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                    rez.clear();
            }
     }
void viper::calo()
{
     double qm,qw,qo,mcl,
            mw,mo,mwater,
            mobject,lf;
     string sel, gans;         
     
     while(true){
          cout << "\nViper_Physics_calolimetry: ";
          cin >> sel;
          rez.IN_History(sel);
          rez.univSelec(sel,sel); 
     
          
             if(sel == "latentheat"||sel == "LatentHeat"||sel == "LATENTHEAT")
             {
                    cout << "enter mass(g) of calolimater:            ";
                    mcl = rez.VDO();
                    cout << "enter mass(g) of calolimater and WATER:  ";
                    mw = rez.VDO();
                    cout << "enter mass(g) of calolimater and OBJECT: ";
                    mo = rez.VDO();
                    
                    mwater = mw - mcl;
                    mobject = mo - mcl;
                    
                    qo = abs(mwater + mobject);
                    qo = qo / 4.186;
                    
                    lf = qo / (mobject / 1000);
                    
                    cout << "the latent heat of the object is: " << lf << "(j/kg)";
                    }
             if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
             {
                    cout << "________________________________________________________\n"
                         << setw(15) << "latentheat" << setw(40) << "find latent heat of a object\n"
                         //<< setw(15) << "" << setw(40) << "\n"
                         //<< setw(15) << "" << setw(40) << "\n"
                         << setw(15) << "calc" << setw(41) << "simple calculater\n"
                         << setw(15) << "clear" << setw(40) << "Clear screen\n"
                         << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                         }
             if(sel =="cd"||sel =="CD")
                    break;
     	       if(sel == "calc")
	                 rez.calc();

             if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                    rez.clear();
            }
     }
void viper::elecField()
{
     double q1,q2,q3,r,
            q[50], ans,
            cash,cash1, cash2;
     string sel, gans;
     
     while(true){
          cout << "\nViper_Physics_ElectricFields: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "coulomb"||sel == "Coulomb"||sel == "COULOMB")
          {
                 cout << "    Enter the charge of the first object:   ";
                 q1 = rez.VDO();
                 cout << "    Enter the charge of the second object:  ";
                 q2 = rez.VDO();
                 cout << "    Enter the distance between the objects: ";
                 r = rez.VDO();
                 
                 ans = (8.987 * pow(10.0,9.0)) * (abs(q1 * q2) / pow(r, 2));
                 cout << "\nThe force produced by these charges are " << ans << " N" << endl;
                 }
          if(sel == "ring"||sel == "Ring"||sel == "RING")
          {
                 cout << "    Enter the charge of the test object:    ";
                 q1 = rez.VDO();
                 cout << "    Enter the charge of the ring:           ";
                 q2 = rez.VDO();
                 cout << "    Enter the radius of the ring:           ";
                 q3 = rez.VDO();
                 cout << "    Enter the distance between the objects: ";
                 r = rez.VDO();
                 
                 ans = ((8.987 * pow(10.0,9.0)) * r) / pow((pow(q3, 2) *pow(r, 2)), 1.5);
                 ans = ans * q2;
                 
                 cout << "the force produced by the system is " << ans << " N" << endl;
                 }
          if(sel == "zeronet"||sel == "ZeroNet"||sel == "ZERONET")
          {
                 cout << "    Enter total distance between charges: ";
                 r = rez.VDO();
                 cout << "    Enter charg of partical 1:            ";
                 q1 = rez.VDO();
                 cout << "    Enter charg of partical 2:            ";
                 q2 = rez.VDO();
                 
                 cash = 2 * pow(r,2); // c
                 cash1 = 2 * (r * 2); // b
                 cash2 = 2 * ((q1 / q2) - 1); // a
                 ans = abs((((-1) * cash1) + sqrt(pow(cash1,2) -4*cash2*cash)) / (2 * cash2));
                 
                 cout << "\nThe equilibrium point is: " << ans << endl;
                 }
          if(sel == "couldist"||sel == "CoulDist"||sel == "COULDIST")
          {
                 cout << "    Enter the charge of the first object:  ";
                 q1 = rez.VDO();
                 cout << "    Enter the charge of the second object: ";
                 q2 = rez.VDO();
                 cout << "    Enter the force of the object:         ";
                 cash = rez.VDO();
                 
                 ans = sqrt((q1 * q2) / (cash / (8.987 * pow(10.0,9.0))));
                 
                 cout << "the distance between the objects is: " << ans << endl;
                 }
          if(sel == "coulcharg"||sel == "CoulCharg"||sel == "COULCHARGE")
          {
                 cout << "    Enter the distance of the objects:     ";
                 r = rez.VDO();
                 cout << "    Enter the force of the object:         ";
                 cash = rez.VDO();
                 
                 ans = sqrt((cash * pow(r, 2)) / (8.987 * pow(10.0,9.0)));
                 
                 cout << "the total charge of the objects is: " << ans << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "coulomb" << setw(40) << "find force by electric forces\n"
                      << setw(15) << "coulcharg" << setw(40) << "find the charg of particals\n"
                      << setw(15) << "couldist" << setw(40) << "find the distanc of charges\n"
                      << setw(15) << "ring" << setw(40) << "Ring of charge problem\n"
                      << setw(15) << "zeronet" << setw(40) << "find the net zero force of two objects\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(40) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	              rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
          }
     }
void viper::componet()
{
     double q[50], ans,
            cash,cash1, cash2 =0;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_ElectronicComponet: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "resitser"||sel == "resitSer"||sel == "RESITSER")
          {
                 cout << "    Enter the number of resisters in series: ";
                 cash = rez.VDO();
                 cout << "_____________________________________________________\n";
                 
                 for(int i=0; i < cash; i++)
                 {
                         cout << "Enter the omhs of resistor " << (i+1) << ": ";
                         cash2 = rez.VDO();
                         
                         cash2 += (cash2);
                         }
                 cout << "\n     the total resistance is: " << cash2 << endl;
                 }
          if(sel == "resitpar"||sel == "resitPar"||sel == "RESITPAR")
          {
                 cout << "    Enter the number of resisters in parallel: ";
                 cash = rez.VDO();
                 cout << "_____________________________________________________\n";
                 
                 for(int i=0; i < cash; i++)
                 {
                         cout << "Enter the omhs of resistor " << (i+1) << ": ";
                         cash2 = rez.VDO();
                         
                         cash2 += 1 / (cash2);
                         }
                 cout << "\n     the total resistance is: " << cash2 << endl;
                 }
////////////////////////////////////////////////////////////////////////////////
          if(sel == "compastser"||sel == "compastSer"||sel == "COMPASTSER")
          {
                 cout << "    Enter the number of resisters in series: ";
                 cash  = rez.VDO();
                 cout << "_____________________________________________________\n";
                 
                 for(int i=0; i < cash; i++)
                 {
                         cout << "Enter the farads of resistor " << (i+1) << ": ";
                         cash2  = rez.VDO();
                         
                         cash2 += 1 / (cash2);
                         }
                 cout << "\n     the total compasitance is: " << cash2 << endl;
                 }
          if(sel == "compastpar"||sel == "compastPar"||sel == "COMPASTPAR")
          {
                 cout << "    Enter the number of resisters in parallel: ";
                 cash = rez.VDO();
                 cout << "_____________________________________________________\n";
                 
                 for(int i=0; i < cash; i++)
                 {
                         cout << "Enter the farads of resistor " << (i+1) << ": ";
                         cash2 = rez.VDO();
                         
                         cash2 += (cash2);
                         }
                 cout << "\n     the total compasitance is: " << cash2 << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "resitSer" << setw(40) << "find force by electric forces\n"
                      << setw(15) << "resitPar" << setw(40) << "find the charg of particals\n"
                      << setw(15) << "compastSer" << setw(40) << "find the distanc of charges\n"
                      << setw(15) << "compastPar" << setw(40) << "Ring of charge problem\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(40) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(40) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	              rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
          }
     }
void viper::magnet()
{
     double m,v,B,q,E, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_Magnetisum: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "evfromv"||sel == "eVfromV"||sel == "EVFROMV")
          {
                 cout << "    enter mass of the partical:     ";
                 m = rez.VDO();
                 cout << "    enter charge of partical:       ";
                 q = rez.VDO();
                 cout << "    Enter the velocity of partical: ";
                 v = rez.VDO();
                 
                 v = pow(v,2);
                 ans = (.5 * v * m) / q;
                 cout << "\nElectron volts produced is: " << ans << endl;
                 }
          if(sel == "vfromelcfield"||sel == "VfromElcField"||sel == "VFROMELCFIRLD")
          {
                 cout << "    Enter electric field strength: ";
                 E = rez.VDO();
                 cout << "    Enter magnetic field strength: ";
                 B = rez.VDO();
                 
                 ans = E / B;
                 cout << "\nThe partical has a velocity of: " << ans << endl;
                 }
          if(sel == "radius"||sel == "Radius"||sel == "RADIUS")
          {
                 cout << "    Enter mass of the partical:       ";
                 m = rez.VDO();
                 cout << "    Enter velocity of the partical:   ";
                 v = rez.VDO();
                 cout << "    Enter the charge of the partical: ";
                 q = rez.VDO();
                 cout << "    Enter the magnetic field strengh: ";
                 B = rez.VDO();
                 
                 ans = (m * v) / (q * B);
                 cout << "\nThe radius of spin is: " << ans << endl;
                 }
          if(sel == "magnet"||sel == "Magnet"||sel == "MAGNET")
          {
                 cout << "    Enter mass of the partical:        ";
                 m = rez.VDO();
                 cout << "    Enter velocity of the partical:    ";
                 v = rez.VDO();
                 cout << "    Enter the charge of the partical:  ";
                 q = rez.VDO();
                 cout << "    Enter the magnetic radius of spin: ";
                 B = rez.VDO();
                 
                 ans = 1 / ((B /(m*v)) * q);
                 cout << "\nThe magnetic field is: " << ans << "T" << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "evfromv" << setw(41) << "find electron volts of a moving partical\n"
                      << setw(15) << "vfromelcfield" << setw(41) << "find velocity from electric/magnet fields\n"
                      << setw(15) << "radius" << setw(41) << "find radius of spin in a mag field\n"
                      << setw(15) << "magnet" << setw(4) << "find mag field from radius and speed\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	              rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
          }
     }
void viper::ior()
{
     double ior,v,B,b,q,E, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_IOR: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
     if(sel == "speed"||sel == "Speed"||sel == "SPEED")
     {
            cout << "   Enter index of refraction: ";
            ior = rez.VDO();
            
            ans = 299800000 / ior;
            
            cout << "The speed of light in the medium is: " << ans << endl;
            }
     if(sel == "reflec"||sel == "Reflec"||sel == "REFLEC")
     {
            cout << "   Enter first IOR that light passes through:  ";
            ior = rez.VDO();
            cout << "   Enter second IOR that light passes through: ";
            E = rez.VDO();
            
            ans =  asin(ior / E) *(180/pi);
            
            cout << "The critical angel of light is: " << ans << " degres" << endl;
            }
     if(sel == "focus"||sel == "Focus"||sel == "FOCUS")
     {
            cout << "   Enter first IOR that light passes through:  ";
            E = rez.VDO();
            cout << "   Enter radius of the lens (flat serface = 0): ";
            v = rez.VDO();
            
            if(v == 0)
                 v = 50000000;
            cout << "   Enter second radius of the lens: ";
            
            b  = rez.VDO();
            if(b == 0)
                 b = 50000000;
            
            ans = (ior - 1) * ((1/v) - (1/b));
            ans = 1 / ans;
            
            cout << "The critical angel of light is: " << ans << " degres" << endl;
            }
     if(sel == "radcurv"||sel == "RadCurv"||sel == "RADCURV")
     {
            cout << "   Enter the IOR of the material:              ";
            ior = rez.VDO();
            cout << "   Enter focal lenght of the lens:             ";
            E = rez.VDO();
            cout << "   Enter raius of the lens (flat serface = 0): ";
            v = rez.VDO();
            
            if(v == 0)
                 v = 50000000;
            
            ans = (E/(ior - 1)) + (1/v);
            ans = 1 / ans;
            
            cout << "The critical angel of light is: " << ans << " degres" << endl;
            }
     if(sel == "angle"||sel == "Angle"||sel == "ANGLE")
     {
            cout << "   Enter the IOR of first material:    ";
            ior = rez.VDO();
            cout << "   Enter the IOR of second material:   ";
            v = rez.VDO();
            cout << "   Enter the entry angle of the light: ";
            E = rez.VDO();
            
            ans = ((sin(E *(pi/180))) * ior) / v;
            
            cout << "The critical angel of light is: " << ans << " degres" << endl;
            }
     if(sel == "iorang"||sel == "IorAng"||sel == "IORANG")
     {
            cout << "   Enter the IOR of first material:    ";
            ior = rez.VDO();
            cout << "   Enter the exit angle of the light:  ";
            v = rez.VDO();
            cout << "   Enter the entry angle of the light: ";
            E = rez.VDO();
         
            ans = ((sin(E *(pi/180))) * ior) / (sin(v *(pi/180)));
            
            cout << "The critical angel of light is: " << ans << " degres" << endl;
            }
     if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "angle" << setw(41) << "find refraction angle\n"
                      << setw(15) << "focus" << setw(41) << "find focal lengh with IOR\n"
                      << setw(15) << "iorang" << setw(41) << "find IOR from angle of refraction\n"
                      << setw(15) << "speed" << setw(41) << "find speed of light in a medium\n"
                      << setw(15) << "reflec" << setw(41) << "find reflection angle of material\n"
                      << setw(15) << "radcurv" << setw(41) << "find radius of curviture\n"
                      
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 // cout << string(50,'\n');
                 clear();
          }
     }
void viper::lens()
{
     double p,B,q,E,f, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_Lenses: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
     if(sel == "focus"||sel == "Focus"||sel == "FOCUS")
     {
            cout << "    Enter the q distance:";
            p = rez.VDO();
            cout << "    Enter the P distance:";
            q = rez.VDO();
            ans = (1/q) + (1/p);
            ans = (1/ans);
            
            cout << "\nThe focus is located at: " << ans << endl;
            }
     if(sel == "q"||sel == "Q")
     {
            cout << "    Enter the q distance:";
	    p = rez.VDO();
            cout << "    Enter the P distance:";
            q = rez.VDO();
            ans = (1/q) - (1/p);
            ans = (1/ans);
            
            cout << "\nThe focus is located at: " << ans << endl;
            }
     if(sel == "imhight"||sel == "Imhight"||sel == "IMHIGHT")
     {
            cout << "    Enther object hight:       ";
            B = rez.VDO(); 
            cout << "    Enter distance from lense: ";
            p = rez.VDO()  ;
            cout << "    Enter focal lenght:        ";
            f = rez.VDO() ;
            
            ans = 1 / ((1 / p) - (1 / f));
            ans = (B / p) * ans;
            
            cout << "Object hight is: " << ans << endl;
            }
     if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "focus" << setw(41) <<   "find focus of with p and q\n"
                      << setw(15) << "imhight" << setw(41) << "find image hight with focal lengh\n"
                      << setw(15) << "q" << setw(41) << "find q distance\n"
                      
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 // cout << string(50,'\n');
                 rez.clear();
          }
     }
//------------------------------------------------------------------------------
void viper::light()
{
     double d,sd,yd,L,m,w1,w2, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_Light: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "wavel"||sel == "WaveL"||sel == "WAVEL")
          {
                 cout << "    Enter slit distance:         ";
                 sd = rez.VDO();
                 cout << "    Enter projection distance:   ";
                 L = rez.VDO();
                 cout << "    Enter light fring thickness: ";
                 yd = rez.VDO();
                 cout << "    Enter M order value:         ";
                 m = rez.VDO();
                 
                 ans = (yd * sd) / ((m + .5) * L);
                 
                 cout << "\nThe wavelength of light produced is: " << ans << endl;
                 }
          if(sel == "dist"||sel == "Dist"||sel == "DIST")
          {
                 cout << "    Enter projection distance:  ";
                 L = rez.VDO();
                 cout << "    Enter slit distance:        ";
                 sd = rez.VDO();
                 cout << "    Enter wavelenghth of light: ";
                 yd = rez.VDO();
                 
                 ans = L * (yd/sd);
                 
                 cout << "\nThe distance for the adjacent fringes is: " << ans << endl;
                 }
          if(sel == "2wavel"||sel == "2WaveL"||sel == "2WAVEL")
          {
                 cout << "    Enter projection distance:      ";
                 L = rez.VDO();
                 cout << "    Enter slit distance:            ";
                 sd = rez.VDO(); 
                 cout << "    Enter wavelenghth of light(1):  ";
                 w1 = rez.VDO();
                 cout << "    Enter wavelenghth of light(2):  ";
                 w2 = rez.VDO();
                 cout << "    Enter M order value:            ";
                 m = rez.VDO();
                 
                 ans = ((L * m)/ sd) * (abs(w1 - w2));
                 
                 cout << "\nThe separation is: " << ans << endl;
                 }
          if(sel == "angle"||sel == "Angle"||sel == "ANGLE")
          {
                 cout << "    Enter projection distance:       ";
                 L = rez.VDO();
                 cout << "    Enter slit distance:             ";
                 sd = rez.VDO(); 
                 cout << "    Enter distance form two fringes: ";
                 w1 = rez.VDO();
                 cout << "    Enter M order value:             ";
                 m = rez.VDO();
                 
                 ans = atan(w1 / L) *(180/pi);
                 ans = (sd * sin(ans *(pi/180))) / m;
                 
                 cout << "\nThe separation is: " << ans << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "angle" << setw(41) << "find wavelenght from angle\n"
                      << setw(15) << "wavel" << setw(41) << "find wavelenght of light with DubleSlit\n"
                      << setw(15) << "dist" << setw(41) << "find distance of light fringes\n"
                      << setw(15) << "2wavel" << setw(41) << "find distance of fringes from 2 lights\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 // cout << string(50,'\n');
                 rez.clear();
          }
     }
//////////////////////////////////////////////////////////////////////////////// 
void viper::wave()
{
     double wl, f, a, k, x, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_WaveDinamics: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "speed"||sel == "Speed"||sel =="SPEED")
          {
                 cout << "    Enter wavelenghth:    ";
                 wl = rez.VDO();
                 cout << "    Enter frequency (Hz): ";
                 f = rez.VDO();
                 
                 ans = wl * f;
                 cout << "Wave speed is: " << ans << " m/s\n";
                 }
          if(sel == "freq"||sel == "Freq"||sel =="FREQ")
          {
                 cout << "    Enter wave speed: ";
                 ans = rez.VDO();
                 cout << "    Enter wavelenght: ";
                 wl = rez.VDO();
                 
                 f = ans / wl;
                 cout << "The frequency of the wave is: " << f << " Hz\n";
                 }
          if(sel == "lightfrq"||sel == "Lightfreq"||sel =="LIGHTFRQ")
          {
                 cout << "    Enter wavelenght: ";
                 wl = rez.VDO(); 
                 
                 f = c / wl;
                 cout << "The frequency of the light wave is: " << f << " Hz\n";
                 }
          if(sel == "wavelengh")
          {
                 cout << "    Enter wave speed: ";
                 ans = rez.VDO();
                 cout << "    Enter frequency:  ";
                 f = rez.VDO();
                 
                 wl = f / ans;
                 cout << "The wavelengh is: " << wl << endl;
          }
	  if(sel == "standingamp"){
		  cout << "    Enter the ampletude of the parant wave: ";
		  a = rez.VDO();
		  cout << "    Enter the lengh of the wave: ";
		  k = rez.VDO();
		  cout << "    Enter a position within the wave node: ";
		  x = rez.VDO();

		  ans = (2 * a * sin(k*x));

		  cout << "The apletude of the standing wave at position " << x <<" is "<< ans << endl;
	  }
          if(sel == "help"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                      << setw(15) << "sped" << setw(41) << "find wave speed\n"
                      << setw(15) << "freq" << setw(41) << "find find wave frequency\n"
                      << setw(15) << "lightfrq" << setw(41) << "find frequency of light\n"
		      << setw(15) << "standingamp" << setw(41) << "find the apletude of standing waves\n"
                      << setw(15) << "wavelengh" << setw(41) << "find wavelengh of wave\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 // cout << string(50,'\n');
                 rez.clear();
          }
     }
////////////////////////////////////////////////////////////////////////////////
void viper::rad()
{
     double Gfinal, Gstart, t, k, ans;
     string sel;
     
     while(true){
          cout << "\nViper_Physics_Radioactivity: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel =="time"||sel =="Time"||sel =="TIME")
          {
                 cout << "    Enter inichal amount of material:   ";
                 Gstart = rez.VDO();
                 cout << "    Enter the final amount of material: ";
                 Gfinal = rez.VDO();
                 cout << "    Enter the decay constant:           ";
                 k = rez.VDO();
                 
                 ans = log(Gfinal / Gfinal) / (-1 * k);
                 cout << "The time for the decay is: " << ans << endl;
                 }
          if(sel =="half"||sel =="Half"||sel =="HALF")
          {
                 cout << "    Enter the decay constant (K):";
                 k = rez.VDO();
                 
                 ans = k / log(2);
                 cout << "The half life is: " << ans << endl;
                 }
          if(sel =="khalf"||sel =="Khalf"||sel =="KHALF")
          {
                 cout << "    Enter the half life: ";
                 t = rez.VDO();
                 
                 ans = log(2) / t;
                 cout << "the decay constant (K) is: " << ans << endl;
                 }
          if(sel =="decayr"||sel =="Decayr"||sel =="DECAYR")
          {
                 cout << "    Enter inichal amount of material:      ";
                 Gstart = rez.VDO();
                 cout << "    Enter the final amount of material:    ";
                 Gfinal = rez.VDO();
                 cout << "    Enter the time that the decay occured: ";
                 t = rez.VDO();
                 
                 ans = log(Gfinal / Gstart) / t;
                 cout << "The decay cononstant is: " << ans << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                                                            ////////////////////////////////////////
                      << setw(15) << "time" << setw(41) << "find amount of material a given period\n"
                      << setw(15) << "half" << setw(41) << "find half life from k\n"
                      << setw(15) << "khalf" << setw(41) << "find k from half life\n"
                      << setw(15) << "decayr" << setw(41) << "find rate of decay\n"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
          if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 // cout << string(50,'\n');
                 rez.clear();
          }
}
///////////////////////////////////////////////////////////////////////////////////////////////
void atomic()
{
     int n;
     double Rh, ans;
     string sel;

     // Rh value
     Rh = (1.097 * 10000000);         
     
     while(true){
          cout << "\nViper_Physics_AtomicPhys: ";
          cin >> sel;
     rez.IN_History(sel);
     rez.univSelec(sel,sel); 
     
          
          if(sel == "hwave"||sel == "Hwave"||sel == "HWAVE")
          {
                 cout << "    Enter Quantem number: ";
                 n = rez.VInt();
                 
                 ans = (Rh * (0.25 - (1 / n)));
                 cout << "Hydrogen wavelenght is: " << ans << endl;
                 }
          if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
          {
                 cout << "________________________________________________________\n"
                                                            ////////////////////////////////////////
                      << setw(15) << "hwave" << setw(41) << "Find wavelengh of hydrogen spectrum"
                      << setw(15) << "calc" << setw(41) << "simple calculater\n"
                      << setw(15) << "clear" << setw(41) << "Clear screen\n"
                      << setw(15) << "cd"<< setw(41) << "Exit program\n";
                                
                      }
          if(sel =="cd"||sel =="CD")
                 break;
     	  if(sel == "calc")
	         rez.calc();

          if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
                 rez.clear();
                 // cout << string(50,'\n');
          }
}
void viper::fluidMec(){
	string sel;

	while(true){
		cout << "\nViper_Physics_AtomicPhys: ";
		cin >> sel;
		rez.IN_History(sel);
		rez.univSelec(sel,sel); 
     

	if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
	{
		cout << "________________________________________________________\n"
		     << setw(15) << "hwave" << setw(41) << "Find wavelengh of hydrogen spectrum"
                     << setw(15) << "calc" << setw(41) << "simple calculater\n"
                     << setw(15) << "clear" << setw(41) << "Clear screen\n"
                     << setw(15) << "cd"<< setw(41) << "Exit program\n";
        }
        if(sel =="cd"||sel =="CD")
		break;
	if(sel == "calc")
		rez.calc();
	if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
		rez.clear();
	// cout << string(50,'\n');
	}
}
////////////////////////////////////////////////////////////////////////////////
void viper::clear()
{
     system("clear");
     // cout << string(50,'\n');
     }
//////////////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////////////// 

void viper::help()
{
     cout << "________________________________________________________\n";
     cout << setw(15) << "adiabetic" << " " << setw(40) << "adiabetic volume presure calculater\n"
          << setw(15) << "cent" << " " << setw(40) << "Centrifuge calculater\n"
          << setw(15) << "componet" << " " << setw(40) << "Find equivilant capacitors and resistors\n"
          << setw(15) << "consAccel" << " " << setw(40) << "Consstant acceleration poblems\n"
          << setw(15) << "consenergy" << " " << setw(40) << "Consstant acceleration poblems\n"
          << setw(15) << "elefield" << " " << setw(40) << "static electric problems\n"
          << setw(15) << "grav" << " " << setw(40) << "Find gravity accelertations/attractions\n"
          << setw(15) << "graven" << " " << setw(40) << "Find potental energy by gravity\n"
          << setw(15) << "heatcap" << " " << setw(40) << "heat capacity problems\n"
          << setw(15) << "ior" << " " << setw(40) << "index of refraction formulas\n"
          << setw(15) << "keneticenergy"<< " "  << setw(40) << "Find kenetic potental energy\n"
          << setw(15) << "lens" << " " << setw(40) << "find focal points of lenses\n"
          << setw(15) << "light" << " " << setw(40) << "nature of light problens and double slit\n"
          << setw(15) << "momentum" << " " << setw(40) << "Find velocity of an object by momentum\n"
          << setw(15) << "magnet" << " " << setw(40) << "Find the voltag and magnetic strength\n"
          << setw(15) << "resist"<< " " << setw(40) << "Find resister color code\n"
          << setw(15) << "projetmot" << " " << setw(40) << "Find projectile motion of a particle\n"
          << setw(15) << "springEnergy" << " " << setw(40) << "Find spring potental energy\n"
          << setw(15) << "tor" << " " << setw(40) << "Find torqure/force/nutns of a system\n"
          << setw(15) << "themexp" << " " << setw(40) << "Find expantion of solid by temp\n"
          
          << setw(15) << "calc" << " " << setw(40) << "simple calculater\n"
          << setw(15) << "cd" << " " << setw(40) << "return to phisics menue\n"
          << setw(15) << "coatl" << setw(40) << "search for program\n"
          << setw(15) << "chmod" << " " << setw(40) << "Change subject phisics/chem/trig\n"
          << setw(15) << "clear" << " " << setw(40) << "Clear screen\n"
          << setw(15) << "history" << " " << setw(40) << "show most keystrokes\n"
          << setw(15) << "rec" << setw(40) << "record your notes and observations\n"
          << setw(15) << "search" << setw(40) << "search for program\n"
          << setw(15) << "exit" << " " << setw(40) << "Exit program\n";
          }

// class destructor
viper::~viper()
{
	// insert your code here
}
