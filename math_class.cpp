// Class automatically generated by Dev-C++ New Class wizard

#include "math.h"  // class's header file
#include "matrix.h"  // matrix library
#include "mMIPS.h"  // matlab using MIPS sintax for matrix calculations
#include "Resor.h" // resorce header file
#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <vector>

using namespace std;

resor ren;

double const pi = 3.141592653589793238462643383279502884197169399375105820974944;
// class constructor
math::math()
{
	// insert your code here
}
void math::dotprod()
{
	double x,y,z,a,
	       x2,y2,z2;
	string sel;

	while (true){
		cout << "\nViper_Math_DotProduct: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);

		if(sel == "vec2d"||sel == "Vec2d"||sel == "VEC2D")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();

			a = (x * x2) + (y * y2);
			cout << "\nthe dot product is: " << a << endl;
		}
		if(sel == "vec3d"||sel == "Vec3d"||sel == "VEC3D")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();

			a = (x * x2) + (y * y2) +(z * z2);
			cout << "\nthe dot product is: " << a << endl;
		}
		if(sel == "mag"||sel == "Mag"||sel == "MAG")
		{
			cout << "    Enter first magnetude: ";
			x = ren.VDO();
			cout << "    Enter first magnetude: ";
			y = ren.VDO();
			cout << "    Enter angle between magnetude: ";
			z = ren.VDO();

			a = (x * y) * cos(z * (pi/(180)));
			cout << "\nthe dot product is: " << a << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n"
				<< setw(15) << "vec3d" << setw(40) << "dot product 3d vectors \n"
				<< setw(15) << "vec2d" << setw(40) << "dot product 2d vectors \n"
				<< setw(15) << "mag" << setw(40) << "find the dot product by magnetude\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::magnetud()
{
	double x,y,z,a,
	       x2,y2,z2;
	string sel;

	while (true){
		cout << "\nViper_Math_Magnetud: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "2d")
		{
			cout << "    Enter x componet: ";
			x = ren.VDO();
			cout << "    Enter y componet: ";
			y = ren.VDO();

			a = sqrt(pow(x,2) + pow(y,2));
			cout << "\nthe magnetude is " << a << endl;
		}
		if(sel == "3d")
		{
			cout << "    Enter x componet: ";
			x = ren.VDO();
			cout << "    Enter y componet: ";
			y = ren.VDO();
			cout << "    Enter z componet: ";
			z = ren.VDO();

			a = sqrt(pow(x,2) + pow(y,2) + pow(z,2));
			cout << "\nthe magnetude is " << a << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "3d" << setw(40) << "magnetude of 3d vector\n"
				<< setw(15) << "2d" << setw(40) << "magnetude 2d vector\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::cross()
{
	double x,y,z,a1,a2,a3,
	       x2,y2,z2,
	       xv,yv,zv;
	string sel;

	while (true){
		cout << "\nViper_Math_CrossProduct: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "2d"||sel == "2D")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "____________________________________\n"
				<< "second  vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();

			a1 = (x * y2) -(x2 * y);
			cout << "\nthe cross product is <" << a1 << ">\n";
		}
		if(sel == "3d"||sel == "3D")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();

			a1 = (y * z2) - (z * y2);
			a2 = (z * x2) - (x * z2);
			a3 = (x * y2) - (y * x2);
			cout << "\nthe cross product is <" << a1<<", "<<a2<<", "<< a3 <<">\n";
		}
		if(sel == "mag"||sel == "Mag"||sel == "MAG")
		{
			cout << "    Enter first magnetude: ";
			x;
			cout << "    Enter first magnetude: ";
			y;
			cout << "    Enter angle between magnetude: ";
			z;

			a1 = (x * y) * sin(z * (pi/(180)));
			cout << "\nthe cross product is: " << a1 << endl;
		}
		if(sel == "tripprod"||sel == "TripProd"||sel == "TRIPPROD")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();
			cout << "____________________________________\n"
				<< "scailing vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			xv = ren.VDO();
			cout << "enter y componet of the vector: ";
			yv = ren.VDO();
			cout << "enter z componet of the vector: ";
			zv = ren.VDO();

			a1 = (y * z2) - (z * y2);
			a2 = (z * x2) - (x * z2);
			a3 = (x * y2) - (y * x2);

			a1 = xv * a1;
			a2 = xv * a2;
			a3 = zv * a3;
			cout << "\nthe cross product is <" << a1<<", "<<a2<<", "<< a3 <<">\n";
		}
		if(sel == "triangle"||sel == "Triangle"||sel == "TRIANGLE")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();

			a1 = (y * z2) - (z * y2);
			a2 = (z * x2) - (x * z2);
			a3 = (x * y2) - (y * x2);
			a1 = .5* sqrt(pow(a1,2) + pow(a2,2) + pow(a3,2));
			cout << "\nthe area of the triangular plane is "<< a1 <<endl;
		}
		if(sel == "vperall"||sel == "VPerall"||sel == "VPERALL")
		{
			cout << "first vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "second vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();
			cout << "____________________________________\n"
				<< "third vector\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			xv = ren.VDO();
			cout << "enter y componet of the vector: ";
			yv = ren.VDO();
			cout << "enter z componet of the vector: ";
			zv = ren.VDO();

			a1 = (y * z2) - (z * y2);
			a2 = (z * x2) - (x * z2);
			a3 = (x * y2) - (y * x2);
			a1 = (xv * a1) + (yv * a2) +(zv * a3);
			cout << "\nthe cross product is " << a1 << endl;
		}

		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "3d" << setw(40) << "cross product of 3d vector\n"
				<< setw(15) << "2d" << setw(40) << "cross product of 2d vector\n"
				<< setw(15) << "mag" << setw(40) << "cross product with magnetude\n"
				<< setw(15) << "triangle" << setw(40) << "find the area of a triangle\n"
				<< setw(15) << "tripprod" << setw(40) << "scalar triple product\n"
				<< setw(15) << "vperall" << setw(40) << "volume of a pperallelepoped\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::sine()
{
	double a,A,b,B,c,C,ans;
	string sel;

	while (true){
		cout << "\nViper_Math_LawOfSin: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "findaa"||sel == "Findaa"||sel == "FINDAA")
		{
			cout << "            /\\\n"
				<< "           /a \\      sin(a)      sin(b)\n"
				<< "        C /    \\B   -------  =  ------\n"
				<< "         /      \\      A           B\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side A:  ";
			A = ren.VDO();
			cout << "    Enter side B:  ";
			B = ren.VDO();
			cout << "    Enter angle b: ";
			b = ren.VDO();

			ans = asin((A * sin(b * (pi/180))) / B) * (180/pi);
			cout << "\the answer is: " << ans << endl;
		}
		if(sel == "FINDB"||sel == "FindB"||sel == "findb")
		{
			cout << "            /\\\n"
				<< "           /a \\      sin(b)      sin(a)\n"
				<< "        C /    \\B   -------  =  -------\n"
				<< "         /      \\      B            A\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side A:       ";
			A = ren.VDO();
			cout << "    Enter angle b:      ";
			b = ren.VDO();
			cout << "    Eenter angel a:      ";
			a = ren.VDO();

			ans = (A * sin(b * (pi/180))) / sin(a * (pi/180));
			cout << "\nthe answer is: " << ans << endl;
		}
		if(sel == "finda"||sel == "FindA"||sel == "FINDA")
		{
			cout << "            /\\\n"
				<< "           /a \\     sin(c)      sin(a)\n"
				<< "        C /    \\B   ------  =  ------\n"
				<< "         /      \\     C           A\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side C:       ";
			C = ren.VDO();
			cout << "    Enter angle c:      ";
			c = ren.VDO();
			cout << "    Enter angel a:      ";
			a = ren.VDO();

			ans = (C * sin(a * (pi/180))) / sin(c * (pi/180));
			cout << "\nthe answer is: " << ans << endl;
		}
		if(sel == "findc"||sel == "findC"||sel == "FINDC")
		{
			cout << "            /\\\n"
				<< "           /a \\     sin(c)     sin(b)\n"
				<< "        C /    \\B   ------  =  ------\n"
				<< "         /      \\     C          B\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    enter side B:       ";
			B = ren.VDO();
			cout << "    enter angle b:      ";
			b = ren.VDO();
			cout << "    enter angel c:      ";
			c = ren.VDO();

			ans = (B * sin(c * (pi/180))) / sin(b * (pi/180));
			cout << "\nthe answer is: " << ans << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "findaa" << setw(40) << "find angle a\n"
				<< setw(15) << "finda" << setw(40) << "find side A\n"
				<< setw(15) << "findb" << setw(40) << "find side B\n"
				<< setw(15) << "findc" << setw(40) << "find side C\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}

void math::coss()
{
	double a,A,b,B,c,C,ans;
	string sel;

	while (true){
		cout << "\nViper_Math_Law-Of-Cosines: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "finda"||sel == "Finda"||sel == "FINDA")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      A^2 = B^2 + C^2 - 2BC(cos(a))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter angle a: ";
			a = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();
			cout << "    Enter side C: ";
			C = ren.VDO();

			A = (B*B) + (C*C) - ((2*B*C)* cos(a *(pi/180)));
			ans = sqrt(A);

			cout << "\nSide A mesures: " << ans << " long\n";
		}
		if(sel == "findb"||sel == "Findb"||sel == "FINDB")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      B^2 = A^2 + C^2 - 2AC(cos(b))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter angle b: ";
			a = ren.VDO();
			cout << "    Enter side A: ";
			B = ren.VDO();
			cout << "    Enter side C: ";
			C = ren.VDO();

			A = (B*B) + (C*C) - ((2*B*C)* cos(a *(pi/180)));
			ans = sqrt(A);

			cout << "\nSide B mesures: " << ans << " long\n";
		}
		if(sel == "findc"||sel == "Findc"||sel == "FINDC")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      C^2 = A^2 + B^2 - 2AB(cos(c))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter angle c: ";
			a = ren.VDO();
			cout << "    Enter side A: ";
			B = ren.VDO();
			cout << "    Enter side B: ";
			C = ren.VDO();

			A = (B*B) + (C*C) - ((2*B*C)* cos(a *(pi/180)));
			ans = sqrt(A);

			cout << "\nSide C mesures: " << ans << " long\n";
		}
		if(sel == "findaa"||sel == "Findaa"||sel == "FINDAA")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      C^2 = A^2 + B^2 - 2AB(cos(c))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side A: ";
			A = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();
			cout << "    Enter side C: ";
			C = ren.VDO();

			A = acos(((A*A)-(B*B)-(C*C))/(-2*B*C))* (180/pi);
			ans = A;

			cout << "\nAngle a mesures: " << ans << " long\n";
		}
		if(sel == "findab"||sel == "Findab"||sel == "FINDAB")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      C^2 = A^2 + B^2 - 2AB(cos(c))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side A: ";
			A = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();
			cout << "    Enter side C: ";
			C = ren.VDO();

			ans = acos(((B*B)-(A*A)-(C*C))/(-2*A*C))* (180/pi);
			;

			cout << "\nAngle b mesures: " << ans << " long\n";
		}
		if(sel == "findac"||sel == "Findac"||sel == "FINDAC")
		{
			cout << "            /\\\n"
				<< "           /a \\\n"
				<< "        C /    \\B      C^2 = A^2 + B^2 - 2AB(cos(c))\n"
				<< "         /      \\\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter side A: ";
			A = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();
			cout << "    Enter side C: ";
			C = ren.VDO();

			ans = acos(((C*C)-(B*B)-(A*A))/(-2*A*B))* (180/pi);
			;

			cout << "\nAngle c mesures: " << ans << " long\n";
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "finda" << setw(40) << "find side A\n"
				<< setw(15) << "findb" << setw(40) << "find side B\n"
				<< setw(15) << "findc" << setw(40) << "find side C\n"
				<< setw(15) << "findaa" << setw(40) << "find angle a\n"
				<< setw(15) << "findab" << setw(40) << "find angle b\n"
				<< setw(15) << "findaC" << setw(40) << "find angle b\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::tang()
{
	double a,A,b,B,c,C,ans;
	string sel;

	while (true){
		cout << "\nViper_Math_Law-Of-Tangents: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "finda" ||sel == "findA"||sel == "FINDA"){
			cout << "            /\\\n"
				<< "           /a \\          A - B   tan(0.5(a - b))\n"
				<< "        C /    \\B       ------ = ---------------\n"
				<< "         /      \\        A + B   tan(0.5(a + b))\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter angle a: ";
			a = ren.VDO();
			cout << "    Enter angle b: ";
			b = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();

			ans = (B *(tan(.5 * (a + b) *(pi/180)) + tan(.5 * (a - b) *(pi/180)))) / 
				(tan(.5 * (a + b) *(pi/180)) - tan(.5 * (a - b) *(pi/180)));
			cout << "\nSide A is " << ans << endl;
		}
		if(sel == "findb" ||sel == "findB"||sel == "FINDB"){
			cout << "            /\\\n"
				<< "           /a \\          A - B   tan(0.5(a - b))\n"
				<< "        C /    \\B       ------ = ---------------\n"
				<< "         /      \\        A + B   tan(0.5(a + b))\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";
			cout << "    Enter angle a: ";
			b = ren.VDO();
			cout << "    Enter angle b: ";
			a = ren.VDO();
			cout << "    Enter side A: ";
			B = ren.VDO();

			ans = (B *(tan(.5 * (a + b) *(pi/180)) + tan(.5 * (a - b) *(pi/180)))) / 
				(tan(.5 * (a + b) *(pi/180)) - tan(.5 * (a - b) *(pi/180)));
			cout << "\nSide B is " << ans << endl;
		}
		if(sel == "findaa" ||sel == "FindAA"||sel == "FINDAA"){
			cout << "            /\\\n"
				<< "           /a \\          A - B   tan(0.5(a - b))\n"
				<< "        C /    \\B       ------ = ---------------\n"
				<< "         /      \\        A + B   tan(0.5(a + b))\n"
				<< "        /_b____c_\\\n"
				<< "             A\n\n";

			cout << "    Enter side A: ";
			A = ren.VDO();
			cout << "    Enter side B: ";
			B = ren.VDO();
			cout << "    Enter angle b: ";
			b = ren.VDO();

			c = atan((A - B)/(A + B)) * (180/pi);
			ans = (b * (c + 1)) / (1 - c);

			cout << "\nAngle a is " << ans << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "finda" << setw(40) << "find side A\n"
				<< setw(15) << "findb" << setw(40) << "find side B\n"
				<< setw(15) << "findaa" << setw(40) << "find angle a\n"
				<< setw(15) << "findab" << setw(40) << "find angle b\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::calcplane()
{
	double x, y, z,
	       x2,y2,z2,
	       xv,yv,zv,
	       a[3],ans;
	string sel, b[3] = {"x","y","z"};

	while (true){
		cout << "\nViper_Math_Plane: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "pfp"||sel == "PfP"||sel == "pFp"||sel == "PFP")
		{
			cout << "FIRST VECTOR\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x = ren.VDO();
			cout << "enter y componet of the vector: ";
			y = ren.VDO();
			cout << "enter z componet of the vector: ";
			z = ren.VDO();
			cout << "____________________________________\n"
				<< "SECOND VECTOR\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			x2 = ren.VDO();
			cout << "enter y componet of the vector: ";
			y2 = ren.VDO();
			cout << "enter z componet of the vector: ";
			z2 = ren.VDO();
			cout << "____________________________________\n"
				<< "POINT ON PLANE\n"
				<< "------------------------------------\n"
				<< "enter x componet of the vector: ";
			xv = ren.VDO();
			cout << "enter y componet of the vector: ";
			yv = ren.VDO();
			cout << "enter z componet of the vector: ";
			zv = ren.VDO();
			//------------------------------------------------------------------------------                   
			a[0] = ((y * z2) - (z * y2));
			a[1] = (-1 * ((x * z2) - (z * x2)));
			a[2] = ((x * y2) - (y * x2));
			ans = (a[0] * -1 * xv) + (a[1] * -1 * yv) + (a[2] * -1 * zv);

			cout << "\nthe equation of the plane is\n";

			// equation formater
			for(int u = 0; u < 3; u ++)
			{
				if(a[u] > 0)
					cout << "+" << a[u];
				else
					cout << a[u];
				cout << b[u] << " ";
			}
			if(ans > 0)
				cout << "+" << ans << " = 0" << endl << endl;
			else
				cout << ans << " = 0" << endl << endl;
		}
		//------------------------------------------------------------------------------
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "pfp" << setw(40) << "plane from points\n"
				<< setw(15) << "pfn" << setw(40) << "plane from normal\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::shape()
{
	double x, y, z, r, ans;
	string sel, b[3] = {"x","y","z"};

	while (true){
		cout << "\nViper_Math_shapes: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "sphearv")
		{
			cout << "    Enter radius of sphear: ";
			r = ren.VDO();
			ans = (4/3) * pi * pow(r,3);

			cout << "The volume of the sphear is: " << ans << endl;
		}
		if(sel == "sphearsa")
		{
			cout << "    Enter radius of sphear: ";
			r = ren.VDO();
			ans = 4 * pi * pow(r,2);

			cout << "The serface area of the sphear is: " << ans << endl; 
		}
		if(sel == "asphearv")
		{
			cout << "    Enter volume of sphear: ";
			r = ren.VDO();

			ans = pow((r / ((4/3) * pi )) , 0.33333333333333);

			cout << "The radius of the sphear is: " << ans << endl;
		}
		if(sel == "cylinderv")
		{
			cout << "    Enter radius of cylinder: ";
			r = ren.VDO();
			cout << "    Enter hight of cylinder:  ";
			x = ren.VDO();
			ans =  pi * pow(r,2) * x;

			cout << "The volume of the cylinder is: " << ans << endl; 
		}
		if(sel == "cylindersa")
		{
			cout << "    Enter radius of cylinder: ";
			r = ren.VDO();
			cout << "    Enter hight of cylinder:  ";
			x = ren.VDO();
			ans = (2 * pi * pow(r,2)) + (2 * pi * r * x);

			cout << "The serface area of the cylinder is: " << ans << endl; 
		}
		if(sel == "conesa")
		{
			cout << "    Enter radius of cone:       ";
			r = ren.VDO();
			cout << "    Enter length of cone side:  ";
			x = ren.VDO();
			ans = (1/3)*pi *x + (pi * pow(r,2));

			cout << "The serface area of the cylinder is: " << ans << endl; 
		}
		if(sel == "conev")
		{
			cout << "    Enter radius of cone: ";
			r = ren.VDO();
			cout << "    Enter hight of cone:  ";
			x = ren.VDO();
			ans = (1/3) * pi * pow(r,2) *x;

			cout << "The volume of the cone is: " << ans << endl; 
		}
		if(sel == "cubev")
		{
			cout << "   ___________    \n"
				<< "  /          /|   \n"
				<< " /__________/ |   \n"
				<< " |          | |   \n"
				<< " |          | |   \n"
				<< " |          | /   \n"
				<< " |__________|/ A  \n"
				<< "       B          \n";
			cout << "    Enter side A of cube:  ";
			r = ren.VDO();
			cout << "    Enter side B of cube:  ";
			y = ren.VDO();
			cout << "    Enter hight of cube:   ";
			x = ren.VDO();

			ans = r * y * x;

			cout << "The volume of the cube is: " << ans << endl; 
		}
		if(sel == "cubesa")
		{
			cout << "   ___________     \n"
				<< "  /          /|    \n"
				<< " /__________/ |    \n"
				<< " |          | |    \n"
				<< " |          | |    \n"
				<< " |          | /    \n"
				<< " |__________|/ A   \n"
				<< "       B           \n";
			cout << "    Enter side A of cube:  ";
			r = ren.VDO();
			cout << "    Enter side B of cube:  ";
			y = ren.VDO();
			cout << "    Enter hight of cube:   ";
			x = ren.VDO();

			ans = (2*(r * y)) + (2*(r * x)) + (2*(y * x));

			cout << "The volume of the cube is: " << ans << endl; 
		}
		if(sel == "pyrav")
		{
			cout << "\n"
				<< "      /\\            \n"
				<< "     /  \\           \n"
				<< "    /    \\          \n"
				<< "   /______\\____     \n"
				<< "  /        \\   /    \n"
				<< " /__________\\ / A   \n"
				<< "       B\n";
			cout << "    Enter side A of pyramid:  ";
			r = ren.VDO();
			cout << "    Enter side B of pyramid:  ";
			y = ren.VDO();
			cout << "    Enter hight of pyramid:   ";
			x = ren.VDO();

			ans = r * y * x * (1/3);

			cout << "The volume of the pyramid is: " << ans << endl; 
		}
		if(sel == "pyrasa")
		{
			cout << "\n"
				<< "      /\\            \n"
				<< "     /  \\           \n"
				<< "    /    \\          \n"
				<< "   /______\\____     \n"
				<< "  /        \\   /    \n"
				<< " /__________\\ / A   \n"
				<< "       B\n";
			cout << "    Enter side A of cube:  ";
			r = ren.VDO();
			cout << "    Enter side B of cube:  ";
			y = ren.VDO();
			cout << "    Enter hight of cube:   ";
			x = ren.VDO();

			ans = (4*((r * x) / 2)) + (r * y);

			cout << "The serface area of the pyramid is: " << ans << endl; 
		}



		if(sel == "circlea")
		{
			cout << "    Enter radius of circle: ";
			r = ren.VDO();
			ans = (pi * pow(r,2));

			cout << "The area of the circle is: " << ans << endl; 
		}
		if(sel == "triangle")
		{
			cout << "    Enter base of triangle:  ";
			x = ren.VDO();
			cout << "    Enter hight of triangle: ";
			y = ren.VDO();
			ans = (x * y) / 2;

			cout << "The area of the triangle is: " << ans << endl; 
		}
		if(sel == "squrea")
		{
			cout << "    Enter base of squre:  ";
			x = ren.VDO();
			cout << "    Enter hight of squre: ";
			y = ren.VDO();
			ans = (x * y);

			cout << "The area of the squrea is: " << ans << endl; 
		}
		if(sel == "trapeza")
		{
			cout << "    Enter bottom lenght:  ";
			x = ren.VDO();
			cout << "    Enter top lenght:     ";
			y = ren.VDO();
			cout << "    Enter hight of squre: ";
			r = ren.VDO();
			ans = .5*(x * y) * r;

			cout << "The area of the trapezoid is: " << ans << endl; 
		}
		if(sel == "parala")
		{
			cout << "    Enter base lenght:  ";
			x = ren.VDO();
			cout << "    Enter hight of squre: ";
			r = ren.VDO();
			ans = x * r;

			cout << "The area of the paralleleogram is: " << ans << endl; 
		}
		if(sel == "ngona")
		{
			cout << "    Enter the size of one side of the polygon: ";
			x = ren.VDO();
			cout << "    Enter the number of sides of the polygon: ";
			y = ren.VDO();

			z = (360/ y) / 2;
			ans = z;
			r = x/2;

			z = 180 - (z + 90);
			z = (r * sin(ans * (pi/180))) / sin(z *(pi/180));
			ans = (x * z * y) / 2;

			cout << "The area of the polygon is: " << ans << endl;
		}
		if(sel == "ngonc")
		{
			cout << "    Enter the size of one side of the polygon: ";
			x = ren.VDO();
			cout << "    Enter the number of sides of the polygon: ";
			y = ren.VDO();

			ans = x * y;
			cout << "The parimiter of the polygon is: " << ans << endl;
		}
		if(sel == "carc")
		{
			cout << "    Enter the radius of the circle: ";
			r = ren.VDO();
			cout << "    Enter the degree the arc makes: ";
			x = ren.VDO();

			ans = x * (pi / 180) * r;
			cout << "The arc lenght is: " << ans << endl;
		}
		if(sel == "paraba")
		{
			cout << "    Enter the hight of the parabola: ";
			x = ren.VDO();
			cout << "    Enter the base of the parabola: ";
			y = ren.VDO();

			ans = (2.0/3.0) * x * y;
			cout << "The area within the parabola is: " << ans << endl;
		}
		if(sel == "ellipsea")
		{
			cout << "    Enter the major lenth of the ellipse: ";
			x = ren.VDO();
			cout << "    Enter the minor lengh of the ellipse: ";
			y = ren.VDO();

			ans = pi * x * y;
			cout << "The area of the ellipse is: " << ans << endl;
		}

		if(sel == "help"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "sphearv" << setw(40) << "find sphear volume\n"
				<< setw(15) << "sphearsa" << setw(40) << "find spher serface area\n"
				<< setw(15) << "asphearv" << setw(40) << "find sphear radius\n"
				<< setw(15) << "cylinderv" << setw(40) << "find cylinder volume\n"
				<< setw(15) << "cylindersa" << setw(40) << "find cylinder serface area\n"
				<< setw(15) << "conesa" << setw(40) << "find cone serface area\n"
				<< setw(15) << "conev" << setw(40) << "find cone volume\n"
				<< setw(15) << "cubesa" << setw(40) << "find cube serface area\n"
				<< setw(15) << "cubev" << setw(40) << "find cube volume\n"
				<< setw(15) << "pyrav" << setw(40) << "find pyramid volume\n"
				<< setw(15) << "pyrasa" << setw(40) << "find pyramid surface area\n"

				<< setw(15) << "carc" << setw(40) << "find circle arc lengh\n"
				<< setw(15) << "circlea" << setw(40) << "find circle area\n"
				<< setw(15) << "ellipsea" << setw(40) << "find circle area\n"
				<< setw(15) << "ngona" << setw(40) << "find polygon area\n"
				<< setw(15) << "ngonc" << setw(40) << "find polygon circumphrance\n"
				<< setw(15) << "parala" << setw(40) << "find parallelagram area\n"
				<< setw(15) << "Paraba" << setw(40) << "find parabola area\n"
				<< setw(15) << "squrea" << setw(40) << "find circle area\n"
				<< setw(15) << "trapeza" << setw(40) << "find trapezoid area\n"
				<< setw(15) << "trianglea" << setw(40) << "find triangle area\n"

				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}

		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::shadow()
{
	double x, y, z, r, ans;
	string sel, b[3] = {"x","y","z"};

	while (true){
		cout << "\nViper_Math_shadow: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "angle"||sel == "Angle"||sel == "ANGLE")
		{
			cout << "     enter shadow length: ";
			x = ren.VDO();
			cout << "     enter object hight:  ";
			y = ren.VDO();

			ans = atan(y/x) * (180/pi);
			cout << "shadow rises at an angle of " << ans << " degrees\n";
		}
		if(sel == "len"||sel == "Len"||sel == "LEN")
		{
			cout << "     enter angle of shadow: ";
			x = ren.VDO();
			cout << "     enter object hight:    ";
			y = ren.VDO();

			ans = pow((tan(x * (pi/180)) / y), -1);
			cout << "shadow messures " << ans << endl;
		}
		if(sel == "hight"||sel == "Hight"||sel == "HIGHT")
		{
			cout << "     enter angle of shadow: ";
			x = ren.VDO();
			cout << "     enter shadows lenth:   ";
			y = ren.VDO();

			ans = tan(x * (pi/180)) * y;
			cout << "the hight of the object messures " << ans << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "angle" << setw(40) << "find shadows angle\n"
				<< setw(15) << "len" << setw(40) << "find shadow lenth\n"
				<< setw(15) << "hight" << setw(40) << "find shadow hight\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
void math::sanDev()
{
	double base, data[500], copy[500], ans, 
	       stanDev = 0,avrg = 0;
	string sel, b[3] = {"x","y","z"};

	while (true){
		cout << "\nViper_Math_standardDeviation: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "stdev"||sel == "StDev"||sel == "STDEV")
		{
			cout << "    Enter number of datapoints: ";
			base = ren.VDO();

			for(int i=0; i< base; i++)
			{
				cout << "    Enter datapoint " << i+1 << ": ";
				cin >> data[i];
				copy[i] = data[i];
				avrg += data[i];
			}
			avrg = avrg / base; // avrage of the data points

			for(int i=0; i< base; i++)
			{
				data[i] = pow((data[i] - avrg), 2);
				stanDev += data[i];
			}
			stanDev = stanDev / base;
			stanDev = sqrt(stanDev); // standerd diviation

			cout << endl;
			for(int i=0; i< base; i++) // output
				cout << copy[i] << ", "; 

			cout << "\n---------------------------------------------------\n"
				<< "  avrage  |  standard deviation\n"
				<< "\n---------------------------------------------------\n"
				<< setw(10) << avrg << setw(10) << stanDev;
			avrg = 0;
			stanDev = 0;
		}
		if(sel == "prcerror"||sel == "PrcError"||sel == "PRCERROR")
		{
			cout << "    Enter your found value:   ";
			base = ren.VDO();
			cout << "    Enter the literary value: ";
			stanDev = ren.VDO();

			ans = (abs((base - stanDev) / stanDev)) * 100;

			cout << "\nThe precent error is: " << ans << "%"<< endl;
		}
		if(sel == "avrg"||sel == "Avrg"||sel == "AVRG")
		{
			ans = 0;
			cout << "    Enter number of datapoints: ";
			base = ren.VDO();

			for(int t=0; t < base; t++)
			{
				cout << "        Enter found valie " << t+1 << ": ";
				cin >> avrg;
				ans += avrg;
			}
			cout << "The avrage of your data is " << ans / base << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "avrg" << setw(40) << "find avrage of data\n"
				<< setw(15) << "stdev" << setw(40) << "find standard deviation\n"
				<< setw(15) << "prcerror" << setw(40) << "find precent error\n"

				<< setw(15) << "calc" << setw(40) << "A simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel == "calc"||sel == "Calc"||sel == "CALC")
			calc();
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
///////////////////////////////////////////////////////////////////////////////
void math::groth()
{
	double k,time,half, start, ans;
	string sel, b[3] = {"x","y","z"};

	while (true){
		cout << "\nViper_Math_exponetalModls: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);


		if(sel == "doubltime"||sel == "DoublTime"||sel == "DOUBLTIME")
		{
			cout << "    Enter K value: ";
			k = ren.VDO();

			time = log(2) / k;
			cout << "\nDoubling time is: " << time;
		}
		if(sel == "halflife"||sel == "HalfLife"||sel == "HALFLIFE")
		{
			cout << "    Enter K value: ";
			k = ren.VDO();

			time = log(.5) / k;
			cout << "\nDoubling time is: " << time;
		}
		if(sel == "expg"||sel == "Expg"||sel == "EXPG")
		{
			cout << "    Enter inical value: ";
			start = ren.VDO();
			cout << "    Enter K value:      ";
			k = ren.VDO();
			cout << "    Enter time:         ";
			time = ren.VDO();

			ans = start * pow(2.718281828,(time * k));
			cout << "\nThe system will reach: " << ans << " at " << time << endl;
		}
		if(sel == "expd"||sel == "Expd"||sel == "EXPD")
		{
			cout << "    Enter inical value: ";
			start = ren.VDO();
			cout << "    Enter K value:      ";
			k = ren.VDO();

			if(k > 1)
				k = k * -1;

			cout << "    Enter time:         ";
			time = ren.VDO();

			ans = start * pow(2.718281828,(time * k));
			cout << "\nThe system will reach: " << ans << " at " << time << endl;
		}
		if(sel == "time"||sel == "Time"||sel == "TIME")
		{
			cout << "    Enter final value:  ";
			ans = ren.VDO();
			cout << "    Enter k value:      ";
			k = ren.VDO();

			time = log(ans) / k;
			cout << "\nTime to reach this value is: " << time;
		}
		if(sel == "k"||sel == "K")
		{
			cout << "    Enter inical value: ";
			half = ren.VDO();
			cout << "    Enter final value:  ";
			ans = ren.VDO();
			cout << "    Enter time:         ";
			time = ren.VDO();

			k = (log(ans) / log(half)) / time;
			cout << "\nThe K value is: " << k;
		}
		if(sel == "init"||sel == "Init"||sel == "INIT")
		{
			cout << "    Enter precent change: ";
			ans = ren.VDO();
			cout << "    Enter K value:        ";
			k = ren.VDO();
			cout << "    Enter time:           ";
			time = ren.VDO();

			half = log(ans) / (time * k);
			cout << half;
			start = pow(2.718281828, half);
			cout << "\nThe system inital value is "<< start << endl;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "doubltime" << setw(40) << "find doubling time\n"
				<< setw(15) << "expg" << setw(40) << "find groth at a given time\n"
				<< setw(15) << "expd" << setw(40) << "find decay at a given time\n"
				<< setw(15) << "init" << setw(40) << "find initial system value\n"
				<< setw(15) << "k" << setw(40) << "find K value\n"
				<< setw(15) << "halflife" << setw(40) << "find half-life time\n"
				<< setw(15) << "time" << setw(40) << "find time for modle to atain value\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";

		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void math::calc()
{
	bool brk = false;
	double ans, num1, num2;
	string mod;

	cin >> num1;
	cin >> mod;

	if(mod == "tan"||mod == "sin"||mod == "cos"||
			mod == "rtan"||mod == "rsin"||mod == "rcos"||
			mod == "arctan"||mod == "arcsin"||mod == "arccos"||
			mod == "log"||mod == "ln"||mod == "log10"||mod == "e"||
			mod =="sqrt")
	{
		if(mod == "tan")
		{ans = tan(num1 *(pi/180));}
		else if(mod == "cos")
		{ans = cos(num1 *(pi/180));}
		else if(mod == "sin")
		{ans = sin(num1 *(pi/180));}

		else if(mod == "arctan")
		{ans = atan(num1) *(180/pi);}
		else if(mod == "arccos")
		{ans = acos(num1) *(180/pi);}
		else if(mod == "arcsin")
		{ans = asin(num1) *(180/pi);}

		else if(mod == "rtan")
		{ans = tan(num1);}
		else if(mod == "rcos")
		{ans = cos(num1);}
		else if(mod == "rsin")
		{ans = sin(num1);}

		else if(mod == "log")
		{ans = log(num1 )/ log(10);}
		else if(mod == "ln")
		{ans = log(num1);}
		else if(mod == "log10")
		{ans = pow(10,num1);}
		else if(mod == "e")
		{ans = pow(2.718281828,num1);}
		else if(mod == "sqrt")
		{ans = sqrt(num1);}
	}
	if(mod == "-"||mod == "+"||mod == "/"||mod == "*")
	{
		cin >> num2;

		if(mod == "+")
		{ans = num1 + num2;}
		else if(mod == "-")
		{ans = num1 - num2;}
		else if(mod == "*")
		{ans = num1 * num2;}
		else if(mod == "/")
		{ans = num1 / num2;}
		else
			return;
	}

	cout << "\n" << ans << endl;
}
/////////////////////////////////////////////////////////////////////////////
void math::rando()
{
	string starter;
	int randBase, i, r , temp,
	    nums[300], display[500][3];
	int q, u =1, e=0;

	cout << "     Enter the total number of randome numbers: ";
	randBase = ren.VInt();

	cout << "______________________________________________________\n";

	srand(time(NULL));
	for(i=1; i <= randBase; i++)
		nums[i] = i;

	for(i=1; i <= randBase; i++)
	{
		r = (rand() % (randBase - 1)) + 1;
		temp = nums[i];
		nums[i] = nums[r];
		nums[r]= temp;
	}
	//set display
	for(i=0; i <= randBase; i++)
	{
		for(q=0; q < 3; q++)
		{ 
			display[i][q]= nums[u];
			u++;
		}
	}
	// Display Random numbers ////////////////////////////// 
	for(i=0; i < r; i++)
	{
		if(e >= randBase)
			break;
		for(q=0; q < 3; q++)
		{
			if(e >= randBase)
				break;  

			cout << setw(15) << display[i][q];
			e++;
		}
		cout << endl;
	}
	cout << endl;
}
////////////////////////////////////////////////////////////////////////////////
void math::prob()
{
	double A, P, ans;
	string sel;

	while (true){
		cout << "\nViper_Math_probability: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);

		if(sel == "atleast1")
		{
			cout << "    Enter the known probibility of the event ocuring: ";
			A = ren.VDO();
			cout << "    Enter the upper limit of the range that this event occurs: ";
			P = ren.VDO();

			A = 1 - A;
			ans = pow(A, P);
			ans = 1 - ans;

			cout << "The probability that this event will occur is: " << ans << endl;
		}

		if(sel == "binomial"){
			cout << "    Enter the number of trials: ";
			A = ren.VDO();
			cout << "    Enter the number of successes among the trials: ";
			P = ren.VDO();
			cout << "    Enter the probability of success in one trial: ";
			ans = ren.VDO();

			ans = (factoreal(int(A))/ (factoreal(int(A - P)) * factoreal(int(P)))) * pow(ans, P) * pow((1-ans), (A-P));
			cout << "the probability of success is: " << ans << endl;
		}
		if(sel == "help"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "atleast1" << setw(40) << "The probability of at least 1 event\n"
				<< setw(15) << "calc" << setw(40) << "simple calculater\n"

				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";
		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();// cout << string(50,'\n');
	}
}
////////////////////////////////////////////////////////////////////////////////
void math::dataAnal()
{
	string sel, getListElem;
	double intoList, mean=0, median=0, mode;
	int index, count=0, modeCount=0;
	vector<double> vec;

	while (true){
		cout << "\nViper_Math_DataAnalisis: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);

		if(sel == "calcall"){
			cout << "    Enter the list elements         ~ to end input\n"
				"    ---------------------------------------------------\n";
			// get values for vector
			do{
				cout << "         ";
				cin >> getListElem;

				if(getListElem != "~"){
					intoList = ren.valid_DOU(getListElem);
					vec.push_back(intoList);
				}
			}while(getListElem != "~");

			// sort hte vector
			ren.sortVector( vec, vec.size());

			// get default value
			mode = vec[0];

			// add up or find values in the vector
			for(int i=0; i<vec.size(); i++){
				mean += vec[i];
			}

			// get the middile of the vector	
			median = vec.size() / 2.0;
			index = int(median);

			// get the mode
			for(int i=0; i<vec.size(); i++){
				for(int u=0; u<vec.size(); u++){
					if(vec[i] == vec[u]){
						count++;
						if(vec[u+1] != vec[i])
							break;
					}
				}
				if(count > 1 && count > modeCount){
					mode = vec[i];
					modeCount = count;
				}
				count =0;
			}

			// calculate the medile of the sorted aray
			if((median - index) == 0){
				median = vec[index] + vec[index-1];
				median /= 2;
			}else
			{median = vec[index];}

			// calculate mean
			mean /= vec.size();

			cout << "the mean is:   " << mean << endl;
			cout << "the median is: " << median << endl;
			if(mode == vec[0] and modeCount <= 1)
				cout << "No satistical mode found\n";
			else
				cout << "the mode is:   " << mode << endl;
			vec.clear();
			modeCount =0;
		}
		if(sel == "mean"){
			cout << "    Enter the list elements         ~ to end input\n"
				"    ---------------------------------------------------\n";
			// get values for vector
			do{
				cout << "         ";
				cin >> getListElem;

				if(getListElem != "~"){
					intoList = ren.valid_DOU(getListElem);
					vec.push_back(intoList);
				}
			}while(getListElem != "~");

			// add up or find values in the vector
			for(int i=0; i<vec.size(); i++){
				mean += vec[i];
			}

			// calculate mean
			mean /= vec.size();

			cout << "the mean of the data is: " << mean << endl;
			mean =0;
			vec.clear();
		}
		if(sel == "median"){
			cout << "    Enter the list elements         ~ to end input\n"
				"    ---------------------------------------------------\n";
			// get values for vector
			do{
				cout << "         ";
				cin >> getListElem;

				if(getListElem != "~"){
					intoList = ren.valid_DOU(getListElem);
					vec.push_back(intoList);
				}
			}while(getListElem != "~");

			// sort hte vector
			ren.sortVector(vec, vec.size());

			median = vec.size() / 2.0;
			index = int(median);

			// calculate the medile of the sorted aray
			if((median - index) == 0){
				median = vec[index] + vec[index-1];
				median /= 2;
			}else
			{median = vec[index];}

			// display the result
			cout << "the median is: " << median << endl;
			vec.clear();
			median =0;
		}
		if(sel == "mode"){
			cout << "    Enter the list elements         ~ to end input\n"
				"    ---------------------------------------------------\n";
			// get values for vector
			do{
				cout << "         ";
				cin >> getListElem;

				if(getListElem != "~"){
					intoList = ren.valid_DOU(getListElem);
					vec.push_back(intoList);
				}
			}while(getListElem != "~");

			// sort hte vector
			ren.sortVector(vec, vec.size());

			// get default value
			mode = vec[0];

			// get the mode
			for(int i=0; i<vec.size(); i++){
				for(int u=0; u<vec.size(); u++){
					if(vec[i] == vec[u]){
						count++;
						if(vec[u+1] != vec[i])
							break;
					}
				}
				if(count > 1 && count > modeCount){
					mode = vec[i];
					modeCount = count;
				}
				count =0;
			}

			if(mode == vec[0] and modeCount <= 1)
				cout << "No satistical mode found\n";
			else
				cout << "the mode is: " << mode << endl;
			vec.clear();
			modeCount=0;
		}
		if(sel == "help"||sel == "Help"||sel == "HELP"||sel == "LS"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "mean" << setw(40) << "mean of a range of numbers\n"
				<< setw(15) << "median" << setw(40) << "median of a range of numbers\n"
				<< setw(15) << "mode" << setw(40) << "mode of a range of numbers\n"
				<< setw(15) << "calcall" << setw(40) << "calculate mean median and mode\n"

				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";
		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();
	}
}
void math::MatrixCalc(){
	bool useAns=false;
	string sel, getInput;
	mMIPS mips;
	double intoMat, Con;
	int Arow, Acol, Brow, Bcol, c;
	matrix glob;

	while (true){
		cout << "\nViper_Math_Matrices: ";
		cin >> sel;
		ren.IN_History(sel);
		ren.univSelec(sel,sel);
		if(sel == "multp"){
			if(useAns == true){
				matrix A;
				A = glob;

				cout << "    Enter the number of rows matrix B: ";
				cin >> getInput;
				Brow = ren.V_INT(getInput);
				cout << "    Enter the number of columns in matrix B: ";
				cin >> getInput;
				Bcol = ren.V_INT(getInput);
				matrix B(Brow, Bcol);
				cout << "      <<Enter values for matrix B>>\n";
				B.build();

				A = A*B;
				glob =A;
				cout << endl << A << endl;
			}
		}
		if(sel == "mult"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << "    Enter the number of rows matrix B: ";
			cin >> getInput;
			Brow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix B: ";
			cin >> getInput;
			Bcol = ren.V_INT(getInput);
			matrix B(Brow, Bcol);
			cout << "      <<Enter values for matrix B>>\n";
			B.build();

			if(Acol == Brow){
				cout << A << "\n"<< B << "=========================\nMULT\n";
				A = A * B;
				glob =A;
				cout << endl << A << endl;
				useAns = true;
			}else
				cout << "unable to multiply ("<< Arow << "x" << Acol<< ") with ("
					<< Brow << "x" << Bcol << ")\n";
		}
		if(sel == "addp"){
			if(useAns == true){
				matrix A;
				A = glob;
				cout << "    Enter the number: ";
				Con = ren.VDO();

				cout << A << "=========================\nINV\n";
				A = A * Con;
				glob =A;
				cout << endl << A << endl;

				cout << " >> use this Answer? (y/n)<<";
				cin >> sel;
				ren.IN_History(sel);
				ren.univSelec(sel,sel);
				if(sel == "n" or sel == "no")
					useAns = false;
			}
		}
		if(sel == "add"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << "    Enter the number of rows matrix B: ";
			cin >> getInput;
			Brow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix B: ";
			cin >> getInput;
			Bcol = ren.V_INT(getInput);
			matrix B(Brow, Bcol);
			cout << "      <<Enter values for matrix B>>\n";
			B.build();


			if(Arow == Brow and Acol == Bcol){
				cout << A << "\n"<< B << "=========================\nADD\n";
				A = A + B;
				glob =A;
				cout << endl << A << endl;
				useAns = true;
			}else
				cout << "unable to Add ("<< Arow << "x" << Acol<< ") with ("
					<< Brow << "x" << Bcol << ")\n";
		}
		if(sel == "multcp"){
			if(useAns == true){
				matrix A;
				A = glob;
				cout << "    Enter the number: ";
				Con = ren.VDO();

				cout << A << "=========================\nMULT\n";
				A = A * Con;
				glob =A;
				cout << endl << A << endl;

				cout << " >> use this Answer? (y/n)<<";
				cin >> sel;
				ren.IN_History(sel);
				ren.univSelec(sel,sel);
				if(sel == "n" or sel == "no")
					useAns = false;
			}
		}
		if(sel == "multc"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << "    Enter the number: ";
			Con = ren.VDO();

			cout << A << "\n"<< Con << "\n=========================\nMULT\n";
			A = A * Con;
			glob =A;
			cout << endl << A << endl;
				useAns = true;
		}
		if(sel == "invp"){
			if(useAns == true){
				matrix A;
				A = glob;
				cout << A << "=========================\nINV\n";
				A = A.invert();
				glob =A;
				cout << endl << A << endl;
			}
		}
		if(sel == "inv"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << A << "=========================\nINV\n";
			A = A.invert();
			glob =A;
			cout << endl << A << endl;
				useAns = true;
		}
		if(sel == "refp"){
			if(useAns == true){
				matrix A;
				A = glob;
				cout << A << "=========================\nRREF\n";
				A = A.rref();
				glob =A;
				cout << endl << A << endl;
			}
		}
		if(sel == "ref"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << A << "=========================\nREF\n";
			A = A.ref();
			glob =A;
			cout << endl << A << endl;
				useAns = true;
		}
		if(sel == "rrefp"){
			if(useAns == true){
				matrix A;
				A = glob;
				cout << A << "=========================\nRREF\n";
				A = A.rref();
				glob =A;
				cout << endl << A << endl;

				cout << " >> use this Answer? (y/n)<<";
				cin >> sel;
				ren.IN_History(sel);
				ren.univSelec(sel,sel);
				if(sel == "n" or sel == "no")
					useAns = false;
			}
		}
		if(sel == "rref"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << A << "=========================\nRREF\n";
			A = A.rref();
			glob =A;
			cout << endl << A << endl;
				useAns = true;
		}
		if(sel == "ontop"){
			if(useAns == true){
				matrix A;
				A = glob;
				Bcol=0;
				for(int r=0;r<Arow; r++)
					for(int c=0;c<Acol; c++){
						if(A.get(r,c-1) ==0 and A.get(r,c) ==1 and c>0)
							Bcol++;
						else if(A.get(r,c) == 1 and r == c)
							Bcol++;
					}

				// ouput an answer
				if(Bcol == Arow)
					cout << "<<this matrix is>>\n\tONTO";
				else
					cout << "<<this matrix is>>\n\tNOT_ ONTO";
			}
		}
		if(sel == "onto"){
			//	A = A.rref();
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << A << endl;
			A = A.rref();

			// find leading ones
			Bcol=0;
			for(int r=0;r<Arow; r++)
				for(int c=0;c<Acol; c++){
					if(A.get(r,c-1) ==0 and A.get(r,c) ==1 and c>0)
						Bcol++;
					else if(A.get(r,c) == 1 and r == c)
						Bcol++;
				}

			// ouput an answer
			if(Bcol == Arow){
				cout << "<<this matrix is>>\n\tONTO";
				useAns = true;
			}else
				cout << "<<this matrix is>>\n\tNOT_ ONTO";
		}
		if(sel == "otoonep"){
			if(useAns == true){
				matrix A;
				A = glob;
				A = A.rref();

				Bcol=0;
				for(int r=0;r<Arow; r++)
					for(int c=0;c<Acol; c++){
						if(A.get(r,c-1) ==0 and A.get(r,c) ==1 and c>0)
							Bcol++;
						else if(A.get(r,c) == 1 and r == c)
							Bcol++;
					}
				if(Bcol == Acol)
					cout << "<<this matrix is>>\n\tONE-TO-ONE";
				else
					cout << "<<this matrix is>>\n\tNOT_ ONE-TO-ONE";
			}
		}
		if(sel == "otoone"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << A << endl;
			A = A.rref();

			Bcol=0;
			for(int r=0;r<Arow; r++)
				for(int c=0;c<Acol; c++){
					if(A.get(r,c-1) ==0 and A.get(r,c) ==1 and c>0)
						Bcol++;
					else if(A.get(r,c) == 1 and r == c)
						Bcol++;
				}
			if(Bcol == Acol){
				cout << "<<this matrix is>>\n\tONE-TO-ONE";
				useAns = true;
			}else
				cout << "<<this matrix is>>\n\tNOT_ ONE-TO-ONE";
			useAns = true;
		}
		if(sel == "powp"){
			if(useAns == true){
				matrix A;
				A = glob;

				cout << "\nA^";
				cin >> getInput;
				Arow = ren.V_INT(getInput);
				A = pow(A, Arow);
			}
		}
		if(sel == "pow"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix A>>\n";
			A.build();

			cout << "\nA^";
			cin >> getInput;
			c = ren.V_INT(getInput);

			A = pow(A, c);
			glob =A;
			cout << A << endl;
			useAns = true;
		}
		if(sel == "augp"){
			if(useAns == true){
				matrix A;
				A = glob;

				cout << "    Enter the number of rows matrix B: ";
				cin >> getInput;
				Brow = ren.V_INT(getInput);
				cout << "    Enter the number of columns in matrix B: ";
				cin >> getInput;
				Bcol = ren.V_INT(getInput);
				matrix B(Brow, Bcol);
				cout << "      <<Enter values for matrix B>>\n";
				B.build();
				A = A.aug(B);
				glob =A;
				cout << A << endl;
				cout << "    what do you want to do with this\n"
					<< "   _________________________________________\n"
					<< "  /  rref    take reduced row echilon form\n"
					<< " /   ref     take row echilon form\n  >>> ";
					cin >> sel;
				if(sel == "ref")
					A = A.ref();
				if(sel == "rref")
					A = A.rref();
				glob = A;
				cout << endl << endl << A << endl;
				useAns = true;
			}
		}
		if(sel == "aug"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << "    Enter the number of rows matrix B: ";
			cin >> getInput;
			Brow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix B: ";
			cin >> getInput;
			Bcol = ren.V_INT(getInput);
			matrix B(Brow, Bcol);
			cout << "      <<Enter values for matrix B>>\n";
			B.build();

			A = A.aug(B);
			glob =A;
			cout << A << endl;
			cout << "    what do you want to do with this\n"
				<< "   _________________________________________\n"
				<< "  /  rref    take reduced row echilon form\n"
				<< " /   ref     take row echilon form\n >>> ";
			cin >> sel;
			if(sel == "ref")
				A = A.ref();
			if(sel == "rref")
				A = A.rref();
			glob = A;
			cout << endl << endl << A << endl;
			useAns = true;
		}
		if(sel == "det"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			if(A.getRow() == A.getCol()){
				cout << endl << A << endl;
				cout << "the determinant is: " << A.det() << endl;
			}else
				cout<<"<<ERROR: unable to calculate determinant matrix is not square>>\n";
		}
		if(sel == "cofp"){
			if(useAns == true){
				matrix A;
				A = glob;
				if(A.getRow() == A.getCol()){
					cout << endl << A << endl;
					glob =A.cof();
					cout << "the Cofactor matrix is: \n" << glob << endl;
				}else
					cout<<"<<ERROR: unable to calculate Cofactor matrix is not square>>\n";
			}
		}
		if(sel == "cof"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			if(A.getRow() == A.getCol()){
				cout << endl << A << endl;
				glob =A.cof();
				cout << "the Cofactor matrix is: \n" << glob << endl;
				useAns = true;
			}else
				cout<<"<<ERROR: unable to calculate Cofactor matrix is not square>>\n";

		}
		if(sel == "tposp"){
			if(useAns == true){
				matrix A;
				A = glob;

				glob =A.tran();
				cout << endl << A << "\nthe transpose is: \n" << glob << endl;
			}
		}
		if(sel == "tpos"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			glob =A.tran();
			cout << endl << A << "\nthe transpose is: \n" << glob << endl;
			useAns = true;
		}
		if(sel == "col"){
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			glob = A.col();
			cout << endl << A <<"\nthe column space is:\n" << glob << endl;
				useAns = true;
		}
		if(sel == "chob2"){
			cout << "    enter the basis matrix\n";
			cout << "    Enter the number of rows matrix A: ";
			cin >> getInput;
			Arow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix A: ";
			cin >> getInput;
			Acol = ren.V_INT(getInput);
			matrix A(Arow, Acol);
			cout << "      <<Enter values for matrix B>>\n";
			A.build();

			cout << "    Enter the number of rows matrix B: ";
			cin >> getInput;
			Brow = ren.V_INT(getInput);
			cout << "    Enter the number of columns in matrix B: ";
			cin >> getInput;
			Bcol = ren.V_INT(getInput);
			matrix B(Brow, Bcol);
			cout << "      <<Enter values for matrix B>>\n";
			B.build();

			matrix bPa, aPb;
			bPa = B.invert() * A;
			aPb = A.invert() * B;
			cout << A << "=========================\naPb\n"
				<< aPb << endl;
			cout << A << "=========================\nbPa\n"
				<< bPa << endl;
		}
		if(sel == "mmips"){
			cout << "\nmatrix MIPS v1.O\ntype 'help' for more information, 'lar' for a list of "
				<< "avalible registers\n"
				<< "________________________________________________________\n";
			mips.table();
		}
		if(sel == "help"||sel == "ls")
		{
			cout << "________________________________________________________\n";
			cout << setw(15) << "add"        << setw(40) << "Add two matrices\n"
			        << setw(15) << "addp"     << setw(40) << "Add the previus matrices\n"
				<< setw(15) << "aug"     << setw(40) << "Augment two matrices\n"
				<< setw(15) << "augp"    << setw(40) << "Augment with previus matrix\n"
				<< setw(15) << "cof"     << setw(40) << "Find cofactor of the matrix\n"
				<< setw(15) << "cofp"    << setw(40) << "Find cofactor of the previus matrix\n"
				<< setw(15) << "chob1"   << setw(40) << "change the base of the matrix\n"
				<< setw(15) << "chob2"   << setw(40) << "change the base of the matrix\n"
				<< setw(15) << "det"     << setw(40) << "calculate determinant of a matrix\n"
				<< setw(15) << "inv"     << setw(40) << "Find the inverse of a matrix\n"
				<< setw(15) << "invp"    << setw(40) << "Find the inverse of previus matrix\n"
				<< setw(15) << "mMIPS"   << setw(40) << "MIPS like matrix calculater\n"
				<< setw(15) << "mult"    << setw(40) << "Multiply two matrices\n"
				<< setw(15) << "multp"   << setw(40) << "Multiply with previus matrix\n"
				<< setw(15) << "multc"   << setw(40) << "Multiply by a constant\n"
				<< setw(15) << "multcp"  << setw(40) << "Multiply a constant with previus\n"
				<< setw(15) << "tpos"    << setw(40) << "Get the transpos of the matrix\n"
				<< setw(15) << "tposp"   << setw(40) << "transpos the previus matrix\n"
				<< setw(15) << "onto"    << setw(40) << "Check if the matrix is onto\n"
				<< setw(15) << "ontop"   << setw(40) << "Check if the last matrix is onto\n"
				<< setw(15) << "otoone"  << setw(40) << "Check if the matrix is oner-to-on\n"
				<< setw(15) << "otoonep" << setw(40) << "Check if the last matrix is oner-to-on\n"
				<< setw(15) << "pow"     << setw(40) << "Find the matrix to the power of n\n"
				<< setw(15) << "powp"    << setw(40) << "Rase the last matrix to the power of n\n"
				<< setw(15) << "ref"     << setw(40) << "Convert to Row Echilon form\n"
				<< setw(15) << "refp"    << setw(40) << "Convert previus to Row Echilon form\n"
				<< setw(15) << "rref"    << setw(40) << "Convert to reduced Row Echilon form\n"
				<< setw(15) << "rrefp"   << setw(40) << "Convert previus to RREF\n"


				<< setw(15) << "calc" << setw(40) << "simple calculater\n"
				<< setw(15) << "clear" << setw(40) << "Clear screen\n"
				<< setw(15) << "cd"<< setw(40) << "Exit program\n";
		}
		if(sel =="cd"||sel =="CD")
			break;
		if(sel =="clear"||sel =="Clear"||sel =="CLEAR")
			ren.clear();
	}
}
////////////////////////////////////////////////////////////////////////////////
void math::clear()
{
	system("clear");
	// cout << string(500,'\n');
}
////////////////////////////////////////////////////////////////////////////////
void math::help()
{
	cout << "________________________________________________________\n";
	cout << setw(15) << "dataa" << setw(40) << "find mean median mode and range\n"
		<< setw(15) << "dot" << setw(40) << "dot product 2d/3d vectors or magnetuds\n"
		<< setw(15) << "magnetud" << setw(40) << "find the magnetuds of 2d/3d vectors\n"
		<< setw(15) << "cos" << setw(40) << "find angls/sides with law of Cos\n"
		<< setw(15) << "cros" << setw(40) << "cross product\n"
		<< setw(15) << "exp" << setw(40) << "exponetal groth and decay modles\n"
		<< setw(15) << "matrx" << setw(40) << "matrix calculations & problem solving\n"
		<< setw(15) << "sin" << setw(40) << "find angls/sides with law of Sins\n"
		<< setw(15) << "shapes" << setw(40) << "find area and volumes of shapes\n"
		<< setw(15) << "sanDev" << setw(40) << "find Standard deviation of data\n"
		<< setw(15) << "plane" << setw(40) << "find equations of planes\n"
		<< setw(15) << "shadow" << setw(40) << "find shadow lenghs and angles\n"
		<< setw(15) << "tan" << setw(40) << "find angls/sides with law of Tans\n"

		<< setw(15) << "calc" << setw(40) << "simple calculater\n"
		<< setw(15) << "cd" << setw(40) << "return to phisics menue\n"
		<< setw(15) << "coatl" << setw(40) << "search for program\n"
		<< setw(15) << "chmod" << setw(40) << "Change subject phisics/chem/trig\n"
		<< setw(15) << "clear" << setw(40) << "Clear screen\n"
		<< setw(15) << "history" << setw(40) << "show most keystrokes\n"
		<< setw(15) << "rec" << setw(40) << "record your notes and observations\n"
		<< setw(15) << "search" << setw(40) << "search for program\n"
		<< setw(15) << "exit"<< setw(40) << "Exit program\n";
}
// class destructor
math::~math()
{
	// insert your code here
}
